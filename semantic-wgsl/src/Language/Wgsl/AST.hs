-- Language definition for Python, generated by ast-generate. Do not edit!
{-# LANGUAGE CPP #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuantifiedConstraints #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UndecidableInstances #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

module Language.Python.AST (module Language.Python.AST, getTestCorpusDir) where

import qualified AST.Parse
import qualified AST.Token
import qualified AST.Traversable1.Class
import qualified AST.Unmarshal
import qualified Data.Foldable
import qualified Data.List as Data.OldList
import qualified Data.Maybe as GHC.Maybe
import qualified Data.Text.Internal
import qualified Data.Traversable
import qualified GHC.Base
import qualified GHC.Generics
import qualified GHC.Records
import qualified GHC.Show
import qualified Prelude as GHC.Classes
import qualified TreeSitter.Node

import TreeSitter.Python (getTestCorpusDir)

debugSymbolNames :: [GHC.Base.String]
debugSymbolNames = debugSymbolNames_0

debugSymbolNames_0 :: [GHC.Base.String]
debugSymbolNames_0 = ["end",
                      "identifier",
                      "_import",
                      "_.",
                      "_from",
                      "___future__",
                      "_(",
                      "_)",
                      "_,",
                      "_as",
                      "_*",
                      "_print",
                      "_>>",
                      "_assert",
                      "_:=",
                      "_return",
                      "_del",
                      "_raise",
                      "_pass",
                      "_break",
                      "_continue",
                      "_if",
                      "_:",
                      "_elif",
                      "_else",
                      "_async",
                      "_for",
                      "_in",
                      "_while",
                      "_try",
                      "_except",
                      "_finally",
                      "_with",
                      "_def",
                      "_->",
                      "_=",
                      "_**",
                      "_global",
                      "_nonlocal",
                      "_exec",
                      "_class",
                      "_@",
                      "_not",
                      "_and",
                      "_or",
                      "_+",
                      "_-",
                      "_/",
                      "_%",
                      "_//",
                      "_|",
                      "_&",
                      "_^",
                      "_<<",
                      "_~",
                      "_<",
                      "_<=",
                      "_==",
                      "_!=",
                      "_>=",
                      "_>",
                      "_<>",
                      "_is",
                      "_lambda",
                      "_+=",
                      "_-=",
                      "_*=",
                      "_/=",
                      "_@=",
                      "_//=",
                      "_%=",
                      "_**=",
                      "_>>=",
                      "_<<=",
                      "_&=",
                      "_^=",
                      "_|=",
                      "_yield",
                      "_[",
                      "_]",
                      "ellipsis",
                      "_{",
                      "_}",
                      "escape_sequence",
                      "_not_escape_sequence",
                      "_format_specifier_token1",
                      "type_conversion",
                      "integer",
                      "float",
                      "true",
                      "false",
                      "none",
                      "_await",
                      "comment",
                      "_semicolon",
                      "_newline",
                      "_indent",
                      "_dedent",
                      "_\"",
                      "_string_content",
                      "_\"",
                      "module",
                      "_statement",
                      "_simple_statements",
                      "import_statement",
                      "import_prefix",
                      "relative_import",
                      "future_import_statement",
                      "import_from_statement",
                      "_import_list",
                      "aliased_import",
                      "wildcard_import",
                      "print_statement",
                      "chevron",
                      "assert_statement",
                      "expression_statement",
                      "named_expression",
                      "return_statement",
                      "delete_statement",
                      "raise_statement",
                      "pass_statement",
                      "break_statement",
                      "continue_statement",
                      "if_statement",
                      "elif_clause",
                      "else_clause",
                      "for_statement",
                      "while_statement",
                      "try_statement",
                      "except_clause",
                      "finally_clause",
                      "with_statement",
                      "with_item",
                      "function_definition",
                      "parameters",
                      "lambda_parameters",
                      "_parameters",
                      "default_parameter",
                      "typed_default_parameter",
                      "list_splat",
                      "dictionary_splat",
                      "global_statement",
                      "nonlocal_statement",
                      "exec_statement",
                      "class_definition",
                      "parenthesized_expression",
                      "argument_list",
                      "decorated_definition",
                      "decorator",
                      "block",
                      "variables",
                      "expression_list",
                      "dotted_name",
                      "_expression_within_for_in_clause",
                      "_expression",
                      "_primary_expression",
                      "not_operator",
                      "boolean_operator",
                      "binary_operator",
                      "unary_operator",
                      "comparison_operator",
                      "lambda",
                      "lambda",
                      "assignment",
                      "augmented_assignment",
                      "_right_hand_side",
                      "yield",
                      "attribute",
                      "subscript",
                      "slice",
                      "call",
                      "typed_parameter",
                      "type",
                      "keyword_argument",
                      "list",
                      "_comprehension_clauses",
                      "list_comprehension",
                      "dictionary",
                      "dictionary_comprehension",
                      "pair",
                      "set",
                      "set_comprehension",
                      "parenthesized_expression",
                      "tuple",
                      "generator_expression",
                      "for_in_clause",
                      "if_clause",
                      "conditional_expression",
                      "concatenated_string",
                      "string",
                      "interpolation",
                      "format_specifier",
                      "format_expression",
                      "await",
                      "_module_repeat1",
                      "__simple_statements_repeat1",
                      "_import_prefix_repeat1",
                      "__import_list_repeat1",
                      "_print_statement_repeat1",
                      "_assert_statement_repeat1",
                      "_if_statement_repeat1",
                      "_try_statement_repeat1",
                      "_with_statement_repeat1",
                      "__parameters_repeat1",
                      "_global_statement_repeat1",
                      "_argument_list_repeat1",
                      "_decorated_definition_repeat1",
                      "_variables_repeat1",
                      "_dotted_name_repeat1",
                      "_comparison_operator_repeat1",
                      "_subscript_repeat1",
                      "_list_repeat1",
                      "__comprehension_clauses_repeat1",
                      "_dictionary_repeat1",
                      "_tuple_repeat1",
                      "_for_in_clause_repeat1",
                      "_concatenated_string_repeat1",
                      "_string_repeat1",
                      "_format_specifier_repeat1"]
data AccessMode a
    = AccessMode {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_1 .
                       AST.Traversable1.Class.Traversable1 a_1)
instance AST.Unmarshal.SymbolMatching AccessMode
    where matchedSymbols _ = []
          showFailure _ node_2 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_2 GHC.Classes.== 65535
                                                                                                    then "ERROR"
                                                                                                    else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_2) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_3 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_4 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_5 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_6 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_3
                                                        c1_4 = TreeSitter.Node.nodeStartPoint node_2
                                TreeSitter.Node.TSPoint r2_5
                                                        c2_6 = TreeSitter.Node.nodeEndPoint node_2
deriving instance GHC.Classes.Eq a_7 => GHC.Classes.Eq (AccessMode a_7)
deriving instance GHC.Classes.Ord a_8 => GHC.Classes.Ord (AccessMode a_8)
deriving instance GHC.Show.Show a_9 => GHC.Show.Show (AccessMode a_9)
instance AST.Unmarshal.Unmarshal AccessMode
instance Data.Foldable.Foldable AccessMode
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor AccessMode
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable AccessMode
    where traverse = AST.Traversable1.Class.traverseDefault1
data AdditiveExpression a
    = AdditiveExpression {ann :: a,
                          extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((AdditiveExpression GHC.Generics.:+: AdditiveOperator GHC.Generics.:+: MultiplicativeExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_10 .
                       AST.Traversable1.Class.Traversable1 a_10)
instance AST.Unmarshal.SymbolMatching AdditiveExpression
    where matchedSymbols _ = []
          showFailure _ node_11 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_11 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_11) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_12 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_13 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_14 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_15 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_12
                                                        c1_13 = TreeSitter.Node.nodeStartPoint node_11
                                TreeSitter.Node.TSPoint r2_14
                                                        c2_15 = TreeSitter.Node.nodeEndPoint node_11
deriving instance GHC.Classes.Eq a_16 => GHC.Classes.Eq (AdditiveExpression a_16)
deriving instance GHC.Classes.Ord a_17 => GHC.Classes.Ord (AdditiveExpression a_17)
deriving instance GHC.Show.Show a_18 => GHC.Show.Show (AdditiveExpression a_18)
instance AST.Unmarshal.Unmarshal AdditiveExpression
instance Data.Foldable.Foldable AdditiveExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor AdditiveExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable AdditiveExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data AdditiveOperator a
    = AdditiveOperator {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_19 .
                       AST.Traversable1.Class.Traversable1 a_19)
instance AST.Unmarshal.SymbolMatching AdditiveOperator
    where matchedSymbols _ = []
          showFailure _ node_20 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_20 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_20) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_21 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_22 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_23 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_24 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_21
                                                        c1_22 = TreeSitter.Node.nodeStartPoint node_20
                                TreeSitter.Node.TSPoint r2_23
                                                        c2_24 = TreeSitter.Node.nodeEndPoint node_20
deriving instance GHC.Classes.Eq a_25 => GHC.Classes.Eq (AdditiveOperator a_25)
deriving instance GHC.Classes.Ord a_26 => GHC.Classes.Ord (AdditiveOperator a_26)
deriving instance GHC.Show.Show a_27 => GHC.Show.Show (AdditiveOperator a_27)
instance AST.Unmarshal.Unmarshal AdditiveOperator
instance Data.Foldable.Foldable AdditiveOperator
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor AdditiveOperator
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable AdditiveOperator
    where traverse = AST.Traversable1.Class.traverseDefault1
data AddressSpace a
    = AddressSpace {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_28 .
                       AST.Traversable1.Class.Traversable1 a_28)
instance AST.Unmarshal.SymbolMatching AddressSpace
    where matchedSymbols _ = []
          showFailure _ node_29 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_29 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_29) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_30 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_31 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_32 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_33 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_30
                                                        c1_31 = TreeSitter.Node.nodeStartPoint node_29
                                TreeSitter.Node.TSPoint r2_32
                                                        c2_33 = TreeSitter.Node.nodeEndPoint node_29
deriving instance GHC.Classes.Eq a_34 => GHC.Classes.Eq (AddressSpace a_34)
deriving instance GHC.Classes.Ord a_35 => GHC.Classes.Ord (AddressSpace a_35)
deriving instance GHC.Show.Show a_36 => GHC.Show.Show (AddressSpace a_36)
instance AST.Unmarshal.Unmarshal AddressSpace
instance Data.Foldable.Foldable AddressSpace
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor AddressSpace
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable AddressSpace
    where traverse = AST.Traversable1.Class.traverseDefault1
data ArgumentExpressionList a
    = ArgumentExpressionList {ann :: a,
                              extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (ExpressionCommaList a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_37 .
                       AST.Traversable1.Class.Traversable1 a_37)
instance AST.Unmarshal.SymbolMatching ArgumentExpressionList
    where matchedSymbols _ = []
          showFailure _ node_38 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_38 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_38) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_39 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_40 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_41 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_42 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_39
                                                        c1_40 = TreeSitter.Node.nodeStartPoint node_38
                                TreeSitter.Node.TSPoint r2_41
                                                        c2_42 = TreeSitter.Node.nodeEndPoint node_38
deriving instance GHC.Classes.Eq a_43 => GHC.Classes.Eq (ArgumentExpressionList a_43)
deriving instance GHC.Classes.Ord a_44 => GHC.Classes.Ord (ArgumentExpressionList a_44)
deriving instance GHC.Show.Show a_45 => GHC.Show.Show (ArgumentExpressionList a_45)
instance AST.Unmarshal.Unmarshal ArgumentExpressionList
instance Data.Foldable.Foldable ArgumentExpressionList
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ArgumentExpressionList
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ArgumentExpressionList
    where traverse = AST.Traversable1.Class.traverseDefault1
data ArrayTypeSpecifier a
    = ArrayTypeSpecifier {ann :: a,
                          extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((ElementCountExpression GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_46 .
                       AST.Traversable1.Class.Traversable1 a_46)
instance AST.Unmarshal.SymbolMatching ArrayTypeSpecifier
    where matchedSymbols _ = []
          showFailure _ node_47 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_47 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_47) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_48 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_49 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_50 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_51 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_48
                                                        c1_49 = TreeSitter.Node.nodeStartPoint node_47
                                TreeSitter.Node.TSPoint r2_50
                                                        c2_51 = TreeSitter.Node.nodeEndPoint node_47
deriving instance GHC.Classes.Eq a_52 => GHC.Classes.Eq (ArrayTypeSpecifier a_52)
deriving instance GHC.Classes.Ord a_53 => GHC.Classes.Ord (ArrayTypeSpecifier a_53)
deriving instance GHC.Show.Show a_54 => GHC.Show.Show (ArrayTypeSpecifier a_54)
instance AST.Unmarshal.Unmarshal ArrayTypeSpecifier
instance Data.Foldable.Foldable ArrayTypeSpecifier
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ArrayTypeSpecifier
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ArrayTypeSpecifier
    where traverse = AST.Traversable1.Class.traverseDefault1
data AssignmentStatement a
    = AssignmentStatement {ann :: a,
                           extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((CompoundAssignmentOperator GHC.Generics.:+: Expression GHC.Generics.:+: LhsExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_55 .
                       AST.Traversable1.Class.Traversable1 a_55)
instance AST.Unmarshal.SymbolMatching AssignmentStatement
    where matchedSymbols _ = []
          showFailure _ node_56 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_56 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_56) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_57 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_58 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_59 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_60 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_57
                                                        c1_58 = TreeSitter.Node.nodeStartPoint node_56
                                TreeSitter.Node.TSPoint r2_59
                                                        c2_60 = TreeSitter.Node.nodeEndPoint node_56
deriving instance GHC.Classes.Eq a_61 => GHC.Classes.Eq (AssignmentStatement a_61)
deriving instance GHC.Classes.Ord a_62 => GHC.Classes.Ord (AssignmentStatement a_62)
deriving instance GHC.Show.Show a_63 => GHC.Show.Show (AssignmentStatement a_63)
instance AST.Unmarshal.Unmarshal AssignmentStatement
instance Data.Foldable.Foldable AssignmentStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor AssignmentStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable AssignmentStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data AttribEnd a
    = AttribEnd {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_64 .
                       AST.Traversable1.Class.Traversable1 a_64)
instance AST.Unmarshal.SymbolMatching AttribEnd
    where matchedSymbols _ = []
          showFailure _ node_65 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_65 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_65) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_66 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_67 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_68 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_69 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_66
                                                        c1_67 = TreeSitter.Node.nodeStartPoint node_65
                                TreeSitter.Node.TSPoint r2_68
                                                        c2_69 = TreeSitter.Node.nodeEndPoint node_65
deriving instance GHC.Classes.Eq a_70 => GHC.Classes.Eq (AttribEnd a_70)
deriving instance GHC.Classes.Ord a_71 => GHC.Classes.Ord (AttribEnd a_71)
deriving instance GHC.Show.Show a_72 => GHC.Show.Show (AttribEnd a_72)
instance AST.Unmarshal.Unmarshal AttribEnd
instance Data.Foldable.Foldable AttribEnd
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor AttribEnd
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable AttribEnd
    where traverse = AST.Traversable1.Class.traverseDefault1
data Attribute a
    = Attribute {ann :: a,
                 extraChildren :: ([AST.Parse.Err ((AttribEnd GHC.Generics.:+: BuiltinValueName GHC.Generics.:+: Expression GHC.Generics.:+: InterpolationSampleName GHC.Generics.:+: InterpolationTypeName) a)])}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_73 .
                       AST.Traversable1.Class.Traversable1 a_73)
instance AST.Unmarshal.SymbolMatching Attribute
    where matchedSymbols _ = [167]
          showFailure _ node_74 = "expected " GHC.Base.<> ("attribute" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_74 GHC.Classes.== 65535
                                                                                                              then "ERROR"
                                                                                                              else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_74) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_75 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_76 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_77 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_78 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_75
                                                        c1_76 = TreeSitter.Node.nodeStartPoint node_74
                                TreeSitter.Node.TSPoint r2_77
                                                        c2_78 = TreeSitter.Node.nodeEndPoint node_74
deriving instance GHC.Classes.Eq a_79 => GHC.Classes.Eq (Attribute a_79)
deriving instance GHC.Classes.Ord a_80 => GHC.Classes.Ord (Attribute a_80)
deriving instance GHC.Show.Show a_81 => GHC.Show.Show (Attribute a_81)
instance AST.Unmarshal.Unmarshal Attribute
instance Data.Foldable.Foldable Attribute
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor Attribute
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable Attribute
    where traverse = AST.Traversable1.Class.traverseDefault1
data BinaryAndExpression a
    = BinaryAndExpression {ann :: a,
                           extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((BinaryAndExpression GHC.Generics.:+: UnaryExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_82 .
                       AST.Traversable1.Class.Traversable1 a_82)
instance AST.Unmarshal.SymbolMatching BinaryAndExpression
    where matchedSymbols _ = []
          showFailure _ node_83 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_83 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_83) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_84 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_85 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_86 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_87 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_84
                                                        c1_85 = TreeSitter.Node.nodeStartPoint node_83
                                TreeSitter.Node.TSPoint r2_86
                                                        c2_87 = TreeSitter.Node.nodeEndPoint node_83
deriving instance GHC.Classes.Eq a_88 => GHC.Classes.Eq (BinaryAndExpression a_88)
deriving instance GHC.Classes.Ord a_89 => GHC.Classes.Ord (BinaryAndExpression a_89)
deriving instance GHC.Show.Show a_90 => GHC.Show.Show (BinaryAndExpression a_90)
instance AST.Unmarshal.Unmarshal BinaryAndExpression
instance Data.Foldable.Foldable BinaryAndExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BinaryAndExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BinaryAndExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data BinaryOrExpression a
    = BinaryOrExpression {ann :: a,
                          extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((BinaryOrExpression GHC.Generics.:+: UnaryExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_91 .
                       AST.Traversable1.Class.Traversable1 a_91)
instance AST.Unmarshal.SymbolMatching BinaryOrExpression
    where matchedSymbols _ = []
          showFailure _ node_92 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_92 GHC.Classes.== 65535
                                                                                                     then "ERROR"
                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_92) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_93 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_94 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_95 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_96 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_93
                                                        c1_94 = TreeSitter.Node.nodeStartPoint node_92
                                TreeSitter.Node.TSPoint r2_95
                                                        c2_96 = TreeSitter.Node.nodeEndPoint node_92
deriving instance GHC.Classes.Eq a_97 => GHC.Classes.Eq (BinaryOrExpression a_97)
deriving instance GHC.Classes.Ord a_98 => GHC.Classes.Ord (BinaryOrExpression a_98)
deriving instance GHC.Show.Show a_99 => GHC.Show.Show (BinaryOrExpression a_99)
instance AST.Unmarshal.Unmarshal BinaryOrExpression
instance Data.Foldable.Foldable BinaryOrExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BinaryOrExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BinaryOrExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data BinaryXorExpression a
    = BinaryXorExpression {ann :: a,
                           extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((BinaryXorExpression GHC.Generics.:+: UnaryExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_100 .
                       AST.Traversable1.Class.Traversable1 a_100)
instance AST.Unmarshal.SymbolMatching BinaryXorExpression
    where matchedSymbols _ = []
          showFailure _ node_101 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_101 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_101) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_102 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_103 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_104 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_105 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_102
                                                        c1_103 = TreeSitter.Node.nodeStartPoint node_101
                                TreeSitter.Node.TSPoint r2_104
                                                        c2_105 = TreeSitter.Node.nodeEndPoint node_101
deriving instance GHC.Classes.Eq a_106 => GHC.Classes.Eq (BinaryXorExpression a_106)
deriving instance GHC.Classes.Ord a_107 => GHC.Classes.Ord (BinaryXorExpression a_107)
deriving instance GHC.Show.Show a_108 => GHC.Show.Show (BinaryXorExpression a_108)
instance AST.Unmarshal.Unmarshal BinaryXorExpression
instance Data.Foldable.Foldable BinaryXorExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BinaryXorExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BinaryXorExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data BitwiseExpression a
    = BitwiseExpression {ann :: a,
                         extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((BinaryAndExpression GHC.Generics.:+: BinaryOrExpression GHC.Generics.:+: BinaryXorExpression GHC.Generics.:+: UnaryExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_109 .
                       AST.Traversable1.Class.Traversable1 a_109)
instance AST.Unmarshal.SymbolMatching BitwiseExpression
    where matchedSymbols _ = []
          showFailure _ node_110 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_110 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_110) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_111 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_112 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_113 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_114 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_111
                                                        c1_112 = TreeSitter.Node.nodeStartPoint node_110
                                TreeSitter.Node.TSPoint r2_113
                                                        c2_114 = TreeSitter.Node.nodeEndPoint node_110
deriving instance GHC.Classes.Eq a_115 => GHC.Classes.Eq (BitwiseExpression a_115)
deriving instance GHC.Classes.Ord a_116 => GHC.Classes.Ord (BitwiseExpression a_116)
deriving instance GHC.Show.Show a_117 => GHC.Show.Show (BitwiseExpression a_117)
instance AST.Unmarshal.Unmarshal BitwiseExpression
instance Data.Foldable.Foldable BitwiseExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BitwiseExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BitwiseExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data BoolLiteral a
    = BoolLiteral {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_118 .
                       AST.Traversable1.Class.Traversable1 a_118)
instance AST.Unmarshal.SymbolMatching BoolLiteral
    where matchedSymbols _ = []
          showFailure _ node_119 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_119 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_119) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_120 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_121 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_122 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_123 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_120
                                                        c1_121 = TreeSitter.Node.nodeStartPoint node_119
                                TreeSitter.Node.TSPoint r2_122
                                                        c2_123 = TreeSitter.Node.nodeEndPoint node_119
deriving instance GHC.Classes.Eq a_124 => GHC.Classes.Eq (BoolLiteral a_124)
deriving instance GHC.Classes.Ord a_125 => GHC.Classes.Ord (BoolLiteral a_125)
deriving instance GHC.Show.Show a_126 => GHC.Show.Show (BoolLiteral a_126)
instance AST.Unmarshal.Unmarshal BoolLiteral
instance Data.Foldable.Foldable BoolLiteral
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BoolLiteral
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BoolLiteral
    where traverse = AST.Traversable1.Class.traverseDefault1
data BreakIfStatement a
    = BreakIfStatement {ann :: a,
                        extraChildren :: (AST.Parse.Err (Expression a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_127 .
                       AST.Traversable1.Class.Traversable1 a_127)
instance AST.Unmarshal.SymbolMatching BreakIfStatement
    where matchedSymbols _ = []
          showFailure _ node_128 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_128 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_128) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_129 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_130 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_131 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_132 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_129
                                                        c1_130 = TreeSitter.Node.nodeStartPoint node_128
                                TreeSitter.Node.TSPoint r2_131
                                                        c2_132 = TreeSitter.Node.nodeEndPoint node_128
deriving instance GHC.Classes.Eq a_133 => GHC.Classes.Eq (BreakIfStatement a_133)
deriving instance GHC.Classes.Ord a_134 => GHC.Classes.Ord (BreakIfStatement a_134)
deriving instance GHC.Show.Show a_135 => GHC.Show.Show (BreakIfStatement a_135)
instance AST.Unmarshal.Unmarshal BreakIfStatement
instance Data.Foldable.Foldable BreakIfStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BreakIfStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BreakIfStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data BreakStatement a
    = BreakStatement {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_136 .
                       AST.Traversable1.Class.Traversable1 a_136)
instance AST.Unmarshal.SymbolMatching BreakStatement
    where matchedSymbols _ = [121]
          showFailure _ node_137 = "expected " GHC.Base.<> ("break_statement" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_137 GHC.Classes.== 65535
                                                                                                                     then "ERROR"
                                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_137) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_138 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_139 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_140 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_141 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_138
                                                        c1_139 = TreeSitter.Node.nodeStartPoint node_137
                                TreeSitter.Node.TSPoint r2_140
                                                        c2_141 = TreeSitter.Node.nodeEndPoint node_137
deriving instance GHC.Classes.Eq a_142 => GHC.Classes.Eq (BreakStatement a_142)
deriving instance GHC.Classes.Ord a_143 => GHC.Classes.Ord (BreakStatement a_143)
deriving instance GHC.Show.Show a_144 => GHC.Show.Show (BreakStatement a_144)
instance AST.Unmarshal.Unmarshal BreakStatement
instance Data.Foldable.Foldable BreakStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BreakStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BreakStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data BuiltinValueName a
    = BuiltinValueName {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_145 .
                       AST.Traversable1.Class.Traversable1 a_145)
instance AST.Unmarshal.SymbolMatching BuiltinValueName
    where matchedSymbols _ = []
          showFailure _ node_146 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_146 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_146) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_147 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_148 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_149 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_150 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_147
                                                        c1_148 = TreeSitter.Node.nodeStartPoint node_146
                                TreeSitter.Node.TSPoint r2_149
                                                        c2_150 = TreeSitter.Node.nodeEndPoint node_146
deriving instance GHC.Classes.Eq a_151 => GHC.Classes.Eq (BuiltinValueName a_151)
deriving instance GHC.Classes.Ord a_152 => GHC.Classes.Ord (BuiltinValueName a_152)
deriving instance GHC.Show.Show a_153 => GHC.Show.Show (BuiltinValueName a_153)
instance AST.Unmarshal.Unmarshal BuiltinValueName
instance Data.Foldable.Foldable BuiltinValueName
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor BuiltinValueName
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable BuiltinValueName
    where traverse = AST.Traversable1.Class.traverseDefault1
data CallExpression a
    = CallExpression {ann :: a,
                      extraChildren :: (AST.Parse.Err (CallPhrase a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_154 .
                       AST.Traversable1.Class.Traversable1 a_154)
instance AST.Unmarshal.SymbolMatching CallExpression
    where matchedSymbols _ = []
          showFailure _ node_155 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_155 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_155) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_156 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_157 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_158 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_159 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_156
                                                        c1_157 = TreeSitter.Node.nodeStartPoint node_155
                                TreeSitter.Node.TSPoint r2_158
                                                        c2_159 = TreeSitter.Node.nodeEndPoint node_155
deriving instance GHC.Classes.Eq a_160 => GHC.Classes.Eq (CallExpression a_160)
deriving instance GHC.Classes.Ord a_161 => GHC.Classes.Ord (CallExpression a_161)
deriving instance GHC.Show.Show a_162 => GHC.Show.Show (CallExpression a_162)
instance AST.Unmarshal.Unmarshal CallExpression
instance Data.Foldable.Foldable CallExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CallExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CallExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data CallPhrase a
    = CallPhrase {ann :: a,
                  extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((ArgumentExpressionList GHC.Generics.:+: Callable) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_163 .
                       AST.Traversable1.Class.Traversable1 a_163)
instance AST.Unmarshal.SymbolMatching CallPhrase
    where matchedSymbols _ = []
          showFailure _ node_164 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_164 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_164) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_165 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_166 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_167 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_168 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_165
                                                        c1_166 = TreeSitter.Node.nodeStartPoint node_164
                                TreeSitter.Node.TSPoint r2_167
                                                        c2_168 = TreeSitter.Node.nodeEndPoint node_164
deriving instance GHC.Classes.Eq a_169 => GHC.Classes.Eq (CallPhrase a_169)
deriving instance GHC.Classes.Ord a_170 => GHC.Classes.Ord (CallPhrase a_170)
deriving instance GHC.Show.Show a_171 => GHC.Show.Show (CallPhrase a_171)
instance AST.Unmarshal.Unmarshal CallPhrase
instance Data.Foldable.Foldable CallPhrase
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CallPhrase
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CallPhrase
    where traverse = AST.Traversable1.Class.traverseDefault1
data Callable a
    = Callable {ann :: a,
                extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err ((Ident GHC.Generics.:+: MatPrefix GHC.Generics.:+: TypeSpecifierWithoutIdent GHC.Generics.:+: VecPrefix) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_172 .
                       AST.Traversable1.Class.Traversable1 a_172)
instance AST.Unmarshal.SymbolMatching Callable
    where matchedSymbols _ = []
          showFailure _ node_173 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_173 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_173) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_174 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_175 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_176 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_177 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_174
                                                        c1_175 = TreeSitter.Node.nodeStartPoint node_173
                                TreeSitter.Node.TSPoint r2_176
                                                        c2_177 = TreeSitter.Node.nodeEndPoint node_173
deriving instance GHC.Classes.Eq a_178 => GHC.Classes.Eq (Callable a_178)
deriving instance GHC.Classes.Ord a_179 => GHC.Classes.Ord (Callable a_179)
deriving instance GHC.Show.Show a_180 => GHC.Show.Show (Callable a_180)
instance AST.Unmarshal.Unmarshal Callable
instance Data.Foldable.Foldable Callable
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor Callable
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable Callable
    where traverse = AST.Traversable1.Class.traverseDefault1
data CaseClause a
    = CaseClause {ann :: a,
                  extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((CaseSelectors GHC.Generics.:+: CompoundStatement) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_181 .
                       AST.Traversable1.Class.Traversable1 a_181)
instance AST.Unmarshal.SymbolMatching CaseClause
    where matchedSymbols _ = []
          showFailure _ node_182 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_182 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_182) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_183 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_184 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_185 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_186 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_183
                                                        c1_184 = TreeSitter.Node.nodeStartPoint node_182
                                TreeSitter.Node.TSPoint r2_185
                                                        c2_186 = TreeSitter.Node.nodeEndPoint node_182
deriving instance GHC.Classes.Eq a_187 => GHC.Classes.Eq (CaseClause a_187)
deriving instance GHC.Classes.Ord a_188 => GHC.Classes.Ord (CaseClause a_188)
deriving instance GHC.Show.Show a_189 => GHC.Show.Show (CaseClause a_189)
instance AST.Unmarshal.Unmarshal CaseClause
instance Data.Foldable.Foldable CaseClause
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CaseClause
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CaseClause
    where traverse = AST.Traversable1.Class.traverseDefault1
data CaseSelector a
    = CaseSelector {ann :: a,
                    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (Expression a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_190 .
                       AST.Traversable1.Class.Traversable1 a_190)
instance AST.Unmarshal.SymbolMatching CaseSelector
    where matchedSymbols _ = []
          showFailure _ node_191 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_191 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_191) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_192 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_193 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_194 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_195 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_192
                                                        c1_193 = TreeSitter.Node.nodeStartPoint node_191
                                TreeSitter.Node.TSPoint r2_194
                                                        c2_195 = TreeSitter.Node.nodeEndPoint node_191
deriving instance GHC.Classes.Eq a_196 => GHC.Classes.Eq (CaseSelector a_196)
deriving instance GHC.Classes.Ord a_197 => GHC.Classes.Ord (CaseSelector a_197)
deriving instance GHC.Show.Show a_198 => GHC.Show.Show (CaseSelector a_198)
instance AST.Unmarshal.Unmarshal CaseSelector
instance Data.Foldable.Foldable CaseSelector
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CaseSelector
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CaseSelector
    where traverse = AST.Traversable1.Class.traverseDefault1
data CaseSelectors a
    = CaseSelectors {ann :: a,
                     extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err (CaseSelector a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_199 .
                       AST.Traversable1.Class.Traversable1 a_199)
instance AST.Unmarshal.SymbolMatching CaseSelectors
    where matchedSymbols _ = []
          showFailure _ node_200 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_200 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_200) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_201 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_202 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_203 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_204 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_201
                                                        c1_202 = TreeSitter.Node.nodeStartPoint node_200
                                TreeSitter.Node.TSPoint r2_203
                                                        c2_204 = TreeSitter.Node.nodeEndPoint node_200
deriving instance GHC.Classes.Eq a_205 => GHC.Classes.Eq (CaseSelectors a_205)
deriving instance GHC.Classes.Ord a_206 => GHC.Classes.Ord (CaseSelectors a_206)
deriving instance GHC.Show.Show a_207 => GHC.Show.Show (CaseSelectors a_207)
instance AST.Unmarshal.Unmarshal CaseSelectors
instance Data.Foldable.Foldable CaseSelectors
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CaseSelectors
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CaseSelectors
    where traverse = AST.Traversable1.Class.traverseDefault1
data ComponentOrSwizzleSpecifier a
    = ComponentOrSwizzleSpecifier {ann :: a,
                                   extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((ComponentOrSwizzleSpecifier GHC.Generics.:+: Expression GHC.Generics.:+: MemberIdent GHC.Generics.:+: SwizzleName) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_208 .
                       AST.Traversable1.Class.Traversable1 a_208)
instance AST.Unmarshal.SymbolMatching ComponentOrSwizzleSpecifier
    where matchedSymbols _ = []
          showFailure _ node_209 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_209 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_209) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_210 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_211 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_212 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_213 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_210
                                                        c1_211 = TreeSitter.Node.nodeStartPoint node_209
                                TreeSitter.Node.TSPoint r2_212
                                                        c2_213 = TreeSitter.Node.nodeEndPoint node_209
deriving instance GHC.Classes.Eq a_214 => GHC.Classes.Eq (ComponentOrSwizzleSpecifier a_214)
deriving instance GHC.Classes.Ord a_215 => GHC.Classes.Ord (ComponentOrSwizzleSpecifier a_215)
deriving instance GHC.Show.Show a_216 => GHC.Show.Show (ComponentOrSwizzleSpecifier a_216)
instance AST.Unmarshal.Unmarshal ComponentOrSwizzleSpecifier
instance Data.Foldable.Foldable ComponentOrSwizzleSpecifier
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ComponentOrSwizzleSpecifier
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ComponentOrSwizzleSpecifier
    where traverse = AST.Traversable1.Class.traverseDefault1
data CompoundAssignmentOperator a
    = CompoundAssignmentOperator {ann :: a,
                                  text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_217 .
                       AST.Traversable1.Class.Traversable1 a_217)
instance AST.Unmarshal.SymbolMatching CompoundAssignmentOperator
    where matchedSymbols _ = []
          showFailure _ node_218 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_218 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_218) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_219 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_220 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_221 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_222 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_219
                                                        c1_220 = TreeSitter.Node.nodeStartPoint node_218
                                TreeSitter.Node.TSPoint r2_221
                                                        c2_222 = TreeSitter.Node.nodeEndPoint node_218
deriving instance GHC.Classes.Eq a_223 => GHC.Classes.Eq (CompoundAssignmentOperator a_223)
deriving instance GHC.Classes.Ord a_224 => GHC.Classes.Ord (CompoundAssignmentOperator a_224)
deriving instance GHC.Show.Show a_225 => GHC.Show.Show (CompoundAssignmentOperator a_225)
instance AST.Unmarshal.Unmarshal CompoundAssignmentOperator
instance Data.Foldable.Foldable CompoundAssignmentOperator
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CompoundAssignmentOperator
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CompoundAssignmentOperator
    where traverse = AST.Traversable1.Class.traverseDefault1
data CompoundStatement a
    = CompoundStatement {ann :: a,
                         extraChildren :: ([AST.Parse.Err (Statement a)])}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_226 .
                       AST.Traversable1.Class.Traversable1 a_226)
instance AST.Unmarshal.SymbolMatching CompoundStatement
    where matchedSymbols _ = []
          showFailure _ node_227 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_227 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_227) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_228 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_229 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_230 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_231 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_228
                                                        c1_229 = TreeSitter.Node.nodeStartPoint node_227
                                TreeSitter.Node.TSPoint r2_230
                                                        c2_231 = TreeSitter.Node.nodeEndPoint node_227
deriving instance GHC.Classes.Eq a_232 => GHC.Classes.Eq (CompoundStatement a_232)
deriving instance GHC.Classes.Ord a_233 => GHC.Classes.Ord (CompoundStatement a_233)
deriving instance GHC.Show.Show a_234 => GHC.Show.Show (CompoundStatement a_234)
instance AST.Unmarshal.Unmarshal CompoundStatement
instance Data.Foldable.Foldable CompoundStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CompoundStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CompoundStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data ConstAssertStatement a
    = ConstAssertStatement {ann :: a,
                            extraChildren :: (AST.Parse.Err (Expression a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_235 .
                       AST.Traversable1.Class.Traversable1 a_235)
instance AST.Unmarshal.SymbolMatching ConstAssertStatement
    where matchedSymbols _ = []
          showFailure _ node_236 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_236 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_236) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_237 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_238 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_239 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_240 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_237
                                                        c1_238 = TreeSitter.Node.nodeStartPoint node_236
                                TreeSitter.Node.TSPoint r2_239
                                                        c2_240 = TreeSitter.Node.nodeEndPoint node_236
deriving instance GHC.Classes.Eq a_241 => GHC.Classes.Eq (ConstAssertStatement a_241)
deriving instance GHC.Classes.Ord a_242 => GHC.Classes.Ord (ConstAssertStatement a_242)
deriving instance GHC.Show.Show a_243 => GHC.Show.Show (ConstAssertStatement a_243)
instance AST.Unmarshal.Unmarshal ConstAssertStatement
instance Data.Foldable.Foldable ConstAssertStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ConstAssertStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ConstAssertStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data ContinuingCompoundStatement a
    = ContinuingCompoundStatement {ann :: a,
                                   extraChildren :: ([AST.Parse.Err ((BreakIfStatement GHC.Generics.:+: Statement) a)])}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_244 .
                       AST.Traversable1.Class.Traversable1 a_244)
instance AST.Unmarshal.SymbolMatching ContinuingCompoundStatement
    where matchedSymbols _ = []
          showFailure _ node_245 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_245 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_245) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_246 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_247 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_248 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_249 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_246
                                                        c1_247 = TreeSitter.Node.nodeStartPoint node_245
                                TreeSitter.Node.TSPoint r2_248
                                                        c2_249 = TreeSitter.Node.nodeEndPoint node_245
deriving instance GHC.Classes.Eq a_250 => GHC.Classes.Eq (ContinuingCompoundStatement a_250)
deriving instance GHC.Classes.Ord a_251 => GHC.Classes.Ord (ContinuingCompoundStatement a_251)
deriving instance GHC.Show.Show a_252 => GHC.Show.Show (ContinuingCompoundStatement a_252)
instance AST.Unmarshal.Unmarshal ContinuingCompoundStatement
instance Data.Foldable.Foldable ContinuingCompoundStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ContinuingCompoundStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ContinuingCompoundStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data ContinuingStatement a
    = ContinuingStatement {ann :: a,
                           extraChildren :: (AST.Parse.Err (ContinuingCompoundStatement a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_253 .
                       AST.Traversable1.Class.Traversable1 a_253)
instance AST.Unmarshal.SymbolMatching ContinuingStatement
    where matchedSymbols _ = []
          showFailure _ node_254 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_254 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_254) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_255 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_256 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_257 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_258 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_255
                                                        c1_256 = TreeSitter.Node.nodeStartPoint node_254
                                TreeSitter.Node.TSPoint r2_257
                                                        c2_258 = TreeSitter.Node.nodeEndPoint node_254
deriving instance GHC.Classes.Eq a_259 => GHC.Classes.Eq (ContinuingStatement a_259)
deriving instance GHC.Classes.Ord a_260 => GHC.Classes.Ord (ContinuingStatement a_260)
deriving instance GHC.Show.Show a_261 => GHC.Show.Show (ContinuingStatement a_261)
instance AST.Unmarshal.Unmarshal ContinuingStatement
instance Data.Foldable.Foldable ContinuingStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ContinuingStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ContinuingStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data CoreLhsExpression a
    = CoreLhsExpression {ann :: a,
                         extraChildren :: (AST.Parse.Err ((Ident GHC.Generics.:+: LhsExpression) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_262 .
                       AST.Traversable1.Class.Traversable1 a_262)
instance AST.Unmarshal.SymbolMatching CoreLhsExpression
    where matchedSymbols _ = []
          showFailure _ node_263 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_263 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_263) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_264 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_265 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_266 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_267 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_264
                                                        c1_265 = TreeSitter.Node.nodeStartPoint node_263
                                TreeSitter.Node.TSPoint r2_266
                                                        c2_267 = TreeSitter.Node.nodeEndPoint node_263
deriving instance GHC.Classes.Eq a_268 => GHC.Classes.Eq (CoreLhsExpression a_268)
deriving instance GHC.Classes.Ord a_269 => GHC.Classes.Ord (CoreLhsExpression a_269)
deriving instance GHC.Show.Show a_270 => GHC.Show.Show (CoreLhsExpression a_270)
instance AST.Unmarshal.Unmarshal CoreLhsExpression
instance Data.Foldable.Foldable CoreLhsExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor CoreLhsExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable CoreLhsExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data DecimalFloatLiteral a
    = DecimalFloatLiteral {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_271 .
                       AST.Traversable1.Class.Traversable1 a_271)
instance AST.Unmarshal.SymbolMatching DecimalFloatLiteral
    where matchedSymbols _ = []
          showFailure _ node_272 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_272 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_272) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_273 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_274 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_275 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_276 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_273
                                                        c1_274 = TreeSitter.Node.nodeStartPoint node_272
                                TreeSitter.Node.TSPoint r2_275
                                                        c2_276 = TreeSitter.Node.nodeEndPoint node_272
deriving instance GHC.Classes.Eq a_277 => GHC.Classes.Eq (DecimalFloatLiteral a_277)
deriving instance GHC.Classes.Ord a_278 => GHC.Classes.Ord (DecimalFloatLiteral a_278)
deriving instance GHC.Show.Show a_279 => GHC.Show.Show (DecimalFloatLiteral a_279)
instance AST.Unmarshal.Unmarshal DecimalFloatLiteral
instance Data.Foldable.Foldable DecimalFloatLiteral
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor DecimalFloatLiteral
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable DecimalFloatLiteral
    where traverse = AST.Traversable1.Class.traverseDefault1
data DecimalIntLiteral a
    = DecimalIntLiteral {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_280 .
                       AST.Traversable1.Class.Traversable1 a_280)
instance AST.Unmarshal.SymbolMatching DecimalIntLiteral
    where matchedSymbols _ = []
          showFailure _ node_281 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_281 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_281) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_282 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_283 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_284 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_285 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_282
                                                        c1_283 = TreeSitter.Node.nodeStartPoint node_281
                                TreeSitter.Node.TSPoint r2_284
                                                        c2_285 = TreeSitter.Node.nodeEndPoint node_281
deriving instance GHC.Classes.Eq a_286 => GHC.Classes.Eq (DecimalIntLiteral a_286)
deriving instance GHC.Classes.Ord a_287 => GHC.Classes.Ord (DecimalIntLiteral a_287)
deriving instance GHC.Show.Show a_288 => GHC.Show.Show (DecimalIntLiteral a_288)
instance AST.Unmarshal.Unmarshal DecimalIntLiteral
instance Data.Foldable.Foldable DecimalIntLiteral
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor DecimalIntLiteral
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable DecimalIntLiteral
    where traverse = AST.Traversable1.Class.traverseDefault1
data DecrementStatement a
    = DecrementStatement {ann :: a,
                          extraChildren :: (AST.Parse.Err (LhsExpression a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_289 .
                       AST.Traversable1.Class.Traversable1 a_289)
instance AST.Unmarshal.SymbolMatching DecrementStatement
    where matchedSymbols _ = []
          showFailure _ node_290 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_290 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_290) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_291 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_292 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_293 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_294 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_291
                                                        c1_292 = TreeSitter.Node.nodeStartPoint node_290
                                TreeSitter.Node.TSPoint r2_293
                                                        c2_294 = TreeSitter.Node.nodeEndPoint node_290
deriving instance GHC.Classes.Eq a_295 => GHC.Classes.Eq (DecrementStatement a_295)
deriving instance GHC.Classes.Ord a_296 => GHC.Classes.Ord (DecrementStatement a_296)
deriving instance GHC.Show.Show a_297 => GHC.Show.Show (DecrementStatement a_297)
instance AST.Unmarshal.Unmarshal DecrementStatement
instance Data.Foldable.Foldable DecrementStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor DecrementStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable DecrementStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data DefaultAloneClause a
    = DefaultAloneClause {ann :: a,
                          extraChildren :: (AST.Parse.Err (CompoundStatement a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_298 .
                       AST.Traversable1.Class.Traversable1 a_298)
instance AST.Unmarshal.SymbolMatching DefaultAloneClause
    where matchedSymbols _ = []
          showFailure _ node_299 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_299 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_299) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_300 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_301 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_302 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_303 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_300
                                                        c1_301 = TreeSitter.Node.nodeStartPoint node_299
                                TreeSitter.Node.TSPoint r2_302
                                                        c2_303 = TreeSitter.Node.nodeEndPoint node_299
deriving instance GHC.Classes.Eq a_304 => GHC.Classes.Eq (DefaultAloneClause a_304)
deriving instance GHC.Classes.Ord a_305 => GHC.Classes.Ord (DefaultAloneClause a_305)
deriving instance GHC.Show.Show a_306 => GHC.Show.Show (DefaultAloneClause a_306)
instance AST.Unmarshal.Unmarshal DefaultAloneClause
instance Data.Foldable.Foldable DefaultAloneClause
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor DefaultAloneClause
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable DefaultAloneClause
    where traverse = AST.Traversable1.Class.traverseDefault1
data DepthTextureType a
    = DepthTextureType {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_307 .
                       AST.Traversable1.Class.Traversable1 a_307)
instance AST.Unmarshal.SymbolMatching DepthTextureType
    where matchedSymbols _ = []
          showFailure _ node_308 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_308 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_308) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_309 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_310 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_311 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_312 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_309
                                                        c1_310 = TreeSitter.Node.nodeStartPoint node_308
                                TreeSitter.Node.TSPoint r2_311
                                                        c2_312 = TreeSitter.Node.nodeEndPoint node_308
deriving instance GHC.Classes.Eq a_313 => GHC.Classes.Eq (DepthTextureType a_313)
deriving instance GHC.Classes.Ord a_314 => GHC.Classes.Ord (DepthTextureType a_314)
deriving instance GHC.Show.Show a_315 => GHC.Show.Show (DepthTextureType a_315)
instance AST.Unmarshal.Unmarshal DepthTextureType
instance Data.Foldable.Foldable DepthTextureType
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor DepthTextureType
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable DepthTextureType
    where traverse = AST.Traversable1.Class.traverseDefault1
data ElementCountExpression a
    = ElementCountExpression {ann :: a,
                              extraChildren :: (AST.Parse.Err ((AdditiveExpression GHC.Generics.:+: BitwiseExpression) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_316 .
                       AST.Traversable1.Class.Traversable1 a_316)
instance AST.Unmarshal.SymbolMatching ElementCountExpression
    where matchedSymbols _ = []
          showFailure _ node_317 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_317 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_317) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_318 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_319 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_320 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_321 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_318
                                                        c1_319 = TreeSitter.Node.nodeStartPoint node_317
                                TreeSitter.Node.TSPoint r2_320
                                                        c2_321 = TreeSitter.Node.nodeEndPoint node_317
deriving instance GHC.Classes.Eq a_322 => GHC.Classes.Eq (ElementCountExpression a_322)
deriving instance GHC.Classes.Ord a_323 => GHC.Classes.Ord (ElementCountExpression a_323)
deriving instance GHC.Show.Show a_324 => GHC.Show.Show (ElementCountExpression a_324)
instance AST.Unmarshal.Unmarshal ElementCountExpression
instance Data.Foldable.Foldable ElementCountExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ElementCountExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ElementCountExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data ElseClause a
    = ElseClause {ann :: a,
                  extraChildren :: (AST.Parse.Err (CompoundStatement a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_325 .
                       AST.Traversable1.Class.Traversable1 a_325)
instance AST.Unmarshal.SymbolMatching ElseClause
    where matchedSymbols _ = [125]
          showFailure _ node_326 = "expected " GHC.Base.<> ("else_clause" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_326 GHC.Classes.== 65535
                                                                                                                 then "ERROR"
                                                                                                                 else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_326) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_327 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_328 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_329 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_330 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_327
                                                        c1_328 = TreeSitter.Node.nodeStartPoint node_326
                                TreeSitter.Node.TSPoint r2_329
                                                        c2_330 = TreeSitter.Node.nodeEndPoint node_326
deriving instance GHC.Classes.Eq a_331 => GHC.Classes.Eq (ElseClause a_331)
deriving instance GHC.Classes.Ord a_332 => GHC.Classes.Ord (ElseClause a_332)
deriving instance GHC.Show.Show a_333 => GHC.Show.Show (ElseClause a_333)
instance AST.Unmarshal.Unmarshal ElseClause
instance Data.Foldable.Foldable ElseClause
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ElseClause
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ElseClause
    where traverse = AST.Traversable1.Class.traverseDefault1
data ElseIfClause a
    = ElseIfClause {ann :: a,
                    extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((CompoundStatement GHC.Generics.:+: Expression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_334 .
                       AST.Traversable1.Class.Traversable1 a_334)
instance AST.Unmarshal.SymbolMatching ElseIfClause
    where matchedSymbols _ = []
          showFailure _ node_335 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_335 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_335) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_336 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_337 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_338 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_339 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_336
                                                        c1_337 = TreeSitter.Node.nodeStartPoint node_335
                                TreeSitter.Node.TSPoint r2_338
                                                        c2_339 = TreeSitter.Node.nodeEndPoint node_335
deriving instance GHC.Classes.Eq a_340 => GHC.Classes.Eq (ElseIfClause a_340)
deriving instance GHC.Classes.Ord a_341 => GHC.Classes.Ord (ElseIfClause a_341)
deriving instance GHC.Show.Show a_342 => GHC.Show.Show (ElseIfClause a_342)
instance AST.Unmarshal.Unmarshal ElseIfClause
instance Data.Foldable.Foldable ElseIfClause
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ElseIfClause
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ElseIfClause
    where traverse = AST.Traversable1.Class.traverseDefault1
data EnableDirective a
    = EnableDirective {ann :: a,
                       extraChildren :: (AST.Parse.Err (ExtensionName a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_343 .
                       AST.Traversable1.Class.Traversable1 a_343)
instance AST.Unmarshal.SymbolMatching EnableDirective
    where matchedSymbols _ = []
          showFailure _ node_344 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_344 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_344) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_345 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_346 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_347 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_348 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_345
                                                        c1_346 = TreeSitter.Node.nodeStartPoint node_344
                                TreeSitter.Node.TSPoint r2_347
                                                        c2_348 = TreeSitter.Node.nodeEndPoint node_344
deriving instance GHC.Classes.Eq a_349 => GHC.Classes.Eq (EnableDirective a_349)
deriving instance GHC.Classes.Ord a_350 => GHC.Classes.Ord (EnableDirective a_350)
deriving instance GHC.Show.Show a_351 => GHC.Show.Show (EnableDirective a_351)
instance AST.Unmarshal.Unmarshal EnableDirective
instance Data.Foldable.Foldable EnableDirective
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor EnableDirective
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable EnableDirective
    where traverse = AST.Traversable1.Class.traverseDefault1
data Expression a
    = Expression {ann :: a,
                  extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((BitwiseExpression GHC.Generics.:+: RelationalExpression GHC.Generics.:+: ShortCircuitAndExpression GHC.Generics.:+: ShortCircuitOrExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_352 .
                       AST.Traversable1.Class.Traversable1 a_352)
instance AST.Unmarshal.SymbolMatching Expression
    where matchedSymbols _ = []
          showFailure _ node_353 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_353 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_353) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_354 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_355 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_356 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_357 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_354
                                                        c1_355 = TreeSitter.Node.nodeStartPoint node_353
                                TreeSitter.Node.TSPoint r2_356
                                                        c2_357 = TreeSitter.Node.nodeEndPoint node_353
deriving instance GHC.Classes.Eq a_358 => GHC.Classes.Eq (Expression a_358)
deriving instance GHC.Classes.Ord a_359 => GHC.Classes.Ord (Expression a_359)
deriving instance GHC.Show.Show a_360 => GHC.Show.Show (Expression a_360)
instance AST.Unmarshal.Unmarshal Expression
instance Data.Foldable.Foldable Expression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor Expression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable Expression
    where traverse = AST.Traversable1.Class.traverseDefault1
data ExpressionCommaList a
    = ExpressionCommaList {ann :: a,
                           extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err (Expression a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_361 .
                       AST.Traversable1.Class.Traversable1 a_361)
instance AST.Unmarshal.SymbolMatching ExpressionCommaList
    where matchedSymbols _ = []
          showFailure _ node_362 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_362 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_362) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_363 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_364 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_365 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_366 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_363
                                                        c1_364 = TreeSitter.Node.nodeStartPoint node_362
                                TreeSitter.Node.TSPoint r2_365
                                                        c2_366 = TreeSitter.Node.nodeEndPoint node_362
deriving instance GHC.Classes.Eq a_367 => GHC.Classes.Eq (ExpressionCommaList a_367)
deriving instance GHC.Classes.Ord a_368 => GHC.Classes.Ord (ExpressionCommaList a_368)
deriving instance GHC.Show.Show a_369 => GHC.Show.Show (ExpressionCommaList a_369)
instance AST.Unmarshal.Unmarshal ExpressionCommaList
instance Data.Foldable.Foldable ExpressionCommaList
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ExpressionCommaList
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ExpressionCommaList
    where traverse = AST.Traversable1.Class.traverseDefault1
data ExtensionName a
    = ExtensionName {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_370 .
                       AST.Traversable1.Class.Traversable1 a_370)
instance AST.Unmarshal.SymbolMatching ExtensionName
    where matchedSymbols _ = []
          showFailure _ node_371 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_371 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_371) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_372 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_373 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_374 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_375 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_372
                                                        c1_373 = TreeSitter.Node.nodeStartPoint node_371
                                TreeSitter.Node.TSPoint r2_374
                                                        c2_375 = TreeSitter.Node.nodeEndPoint node_371
deriving instance GHC.Classes.Eq a_376 => GHC.Classes.Eq (ExtensionName a_376)
deriving instance GHC.Classes.Ord a_377 => GHC.Classes.Ord (ExtensionName a_377)
deriving instance GHC.Show.Show a_378 => GHC.Show.Show (ExtensionName a_378)
instance AST.Unmarshal.Unmarshal ExtensionName
instance Data.Foldable.Foldable ExtensionName
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ExtensionName
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ExtensionName
    where traverse = AST.Traversable1.Class.traverseDefault1
data FloatLiteral a
    = FloatLiteral {ann :: a,
                    extraChildren :: (AST.Parse.Err ((DecimalFloatLiteral GHC.Generics.:+: HexFloatLiteral) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_379 .
                       AST.Traversable1.Class.Traversable1 a_379)
instance AST.Unmarshal.SymbolMatching FloatLiteral
    where matchedSymbols _ = []
          showFailure _ node_380 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_380 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_380) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_381 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_382 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_383 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_384 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_381
                                                        c1_382 = TreeSitter.Node.nodeStartPoint node_380
                                TreeSitter.Node.TSPoint r2_383
                                                        c2_384 = TreeSitter.Node.nodeEndPoint node_380
deriving instance GHC.Classes.Eq a_385 => GHC.Classes.Eq (FloatLiteral a_385)
deriving instance GHC.Classes.Ord a_386 => GHC.Classes.Ord (FloatLiteral a_386)
deriving instance GHC.Show.Show a_387 => GHC.Show.Show (FloatLiteral a_387)
instance AST.Unmarshal.Unmarshal FloatLiteral
instance Data.Foldable.Foldable FloatLiteral
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor FloatLiteral
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable FloatLiteral
    where traverse = AST.Traversable1.Class.traverseDefault1
data ForHeader a
    = ForHeader {ann :: a,
                 extraChildren :: ([AST.Parse.Err ((Expression GHC.Generics.:+: ForInit GHC.Generics.:+: ForUpdate) a)])}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_388 .
                       AST.Traversable1.Class.Traversable1 a_388)
instance AST.Unmarshal.SymbolMatching ForHeader
    where matchedSymbols _ = []
          showFailure _ node_389 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_389 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_389) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_390 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_391 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_392 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_393 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_390
                                                        c1_391 = TreeSitter.Node.nodeStartPoint node_389
                                TreeSitter.Node.TSPoint r2_392
                                                        c2_393 = TreeSitter.Node.nodeEndPoint node_389
deriving instance GHC.Classes.Eq a_394 => GHC.Classes.Eq (ForHeader a_394)
deriving instance GHC.Classes.Ord a_395 => GHC.Classes.Ord (ForHeader a_395)
deriving instance GHC.Show.Show a_396 => GHC.Show.Show (ForHeader a_396)
instance AST.Unmarshal.Unmarshal ForHeader
instance Data.Foldable.Foldable ForHeader
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ForHeader
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ForHeader
    where traverse = AST.Traversable1.Class.traverseDefault1
data ForInit a
    = ForInit {ann :: a,
               extraChildren :: (AST.Parse.Err ((FuncCallStatement GHC.Generics.:+: VariableStatement GHC.Generics.:+: VariableUpdatingStatement) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_397 .
                       AST.Traversable1.Class.Traversable1 a_397)
instance AST.Unmarshal.SymbolMatching ForInit
    where matchedSymbols _ = []
          showFailure _ node_398 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_398 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_398) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_399 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_400 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_401 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_402 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_399
                                                        c1_400 = TreeSitter.Node.nodeStartPoint node_398
                                TreeSitter.Node.TSPoint r2_401
                                                        c2_402 = TreeSitter.Node.nodeEndPoint node_398
deriving instance GHC.Classes.Eq a_403 => GHC.Classes.Eq (ForInit a_403)
deriving instance GHC.Classes.Ord a_404 => GHC.Classes.Ord (ForInit a_404)
deriving instance GHC.Show.Show a_405 => GHC.Show.Show (ForInit a_405)
instance AST.Unmarshal.Unmarshal ForInit
instance Data.Foldable.Foldable ForInit
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ForInit
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ForInit
    where traverse = AST.Traversable1.Class.traverseDefault1
data ForStatement a
    = ForStatement {ann :: a,
                    extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((CompoundStatement GHC.Generics.:+: ForHeader) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_406 .
                       AST.Traversable1.Class.Traversable1 a_406)
instance AST.Unmarshal.SymbolMatching ForStatement
    where matchedSymbols _ = [126]
          showFailure _ node_407 = "expected " GHC.Base.<> ("for_statement" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_407 GHC.Classes.== 65535
                                                                                                                   then "ERROR"
                                                                                                                   else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_407) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_408 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_409 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_410 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_411 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_408
                                                        c1_409 = TreeSitter.Node.nodeStartPoint node_407
                                TreeSitter.Node.TSPoint r2_410
                                                        c2_411 = TreeSitter.Node.nodeEndPoint node_407
deriving instance GHC.Classes.Eq a_412 => GHC.Classes.Eq (ForStatement a_412)
deriving instance GHC.Classes.Ord a_413 => GHC.Classes.Ord (ForStatement a_413)
deriving instance GHC.Show.Show a_414 => GHC.Show.Show (ForStatement a_414)
instance AST.Unmarshal.Unmarshal ForStatement
instance Data.Foldable.Foldable ForStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ForStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ForStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data ForUpdate a
    = ForUpdate {ann :: a,
                 extraChildren :: (AST.Parse.Err ((FuncCallStatement GHC.Generics.:+: VariableUpdatingStatement) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_415 .
                       AST.Traversable1.Class.Traversable1 a_415)
instance AST.Unmarshal.SymbolMatching ForUpdate
    where matchedSymbols _ = []
          showFailure _ node_416 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_416 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_416) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_417 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_418 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_419 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_420 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_417
                                                        c1_418 = TreeSitter.Node.nodeStartPoint node_416
                                TreeSitter.Node.TSPoint r2_419
                                                        c2_420 = TreeSitter.Node.nodeEndPoint node_416
deriving instance GHC.Classes.Eq a_421 => GHC.Classes.Eq (ForUpdate a_421)
deriving instance GHC.Classes.Ord a_422 => GHC.Classes.Ord (ForUpdate a_422)
deriving instance GHC.Show.Show a_423 => GHC.Show.Show (ForUpdate a_423)
instance AST.Unmarshal.Unmarshal ForUpdate
instance Data.Foldable.Foldable ForUpdate
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ForUpdate
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ForUpdate
    where traverse = AST.Traversable1.Class.traverseDefault1
data FuncCallStatement a
    = FuncCallStatement {ann :: a,
                         extraChildren :: (AST.Parse.Err (CallPhrase a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_424 .
                       AST.Traversable1.Class.Traversable1 a_424)
instance AST.Unmarshal.SymbolMatching FuncCallStatement
    where matchedSymbols _ = []
          showFailure _ node_425 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_425 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_425) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_426 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_427 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_428 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_429 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_426
                                                        c1_427 = TreeSitter.Node.nodeStartPoint node_425
                                TreeSitter.Node.TSPoint r2_428
                                                        c2_429 = TreeSitter.Node.nodeEndPoint node_425
deriving instance GHC.Classes.Eq a_430 => GHC.Classes.Eq (FuncCallStatement a_430)
deriving instance GHC.Classes.Ord a_431 => GHC.Classes.Ord (FuncCallStatement a_431)
deriving instance GHC.Show.Show a_432 => GHC.Show.Show (FuncCallStatement a_432)
instance AST.Unmarshal.Unmarshal FuncCallStatement
instance Data.Foldable.Foldable FuncCallStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor FuncCallStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable FuncCallStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data FunctionDecl a
    = FunctionDecl {ann :: a,
                    extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Attribute GHC.Generics.:+: CompoundStatement GHC.Generics.:+: FunctionHeader) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_433 .
                       AST.Traversable1.Class.Traversable1 a_433)
instance AST.Unmarshal.SymbolMatching FunctionDecl
    where matchedSymbols _ = []
          showFailure _ node_434 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_434 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_434) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_435 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_436 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_437 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_438 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_435
                                                        c1_436 = TreeSitter.Node.nodeStartPoint node_434
                                TreeSitter.Node.TSPoint r2_437
                                                        c2_438 = TreeSitter.Node.nodeEndPoint node_434
deriving instance GHC.Classes.Eq a_439 => GHC.Classes.Eq (FunctionDecl a_439)
deriving instance GHC.Classes.Ord a_440 => GHC.Classes.Ord (FunctionDecl a_440)
deriving instance GHC.Show.Show a_441 => GHC.Show.Show (FunctionDecl a_441)
instance AST.Unmarshal.Unmarshal FunctionDecl
instance Data.Foldable.Foldable FunctionDecl
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor FunctionDecl
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable FunctionDecl
    where traverse = AST.Traversable1.Class.traverseDefault1
data FunctionHeader a
    = FunctionHeader {ann :: a,
                      extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Attribute GHC.Generics.:+: Ident GHC.Generics.:+: ParamList GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_442 .
                       AST.Traversable1.Class.Traversable1 a_442)
instance AST.Unmarshal.SymbolMatching FunctionHeader
    where matchedSymbols _ = []
          showFailure _ node_443 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_443 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_443) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_444 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_445 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_446 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_447 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_444
                                                        c1_445 = TreeSitter.Node.nodeStartPoint node_443
                                TreeSitter.Node.TSPoint r2_446
                                                        c2_447 = TreeSitter.Node.nodeEndPoint node_443
deriving instance GHC.Classes.Eq a_448 => GHC.Classes.Eq (FunctionHeader a_448)
deriving instance GHC.Classes.Ord a_449 => GHC.Classes.Ord (FunctionHeader a_449)
deriving instance GHC.Show.Show a_450 => GHC.Show.Show (FunctionHeader a_450)
instance AST.Unmarshal.Unmarshal FunctionHeader
instance Data.Foldable.Foldable FunctionHeader
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor FunctionHeader
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable FunctionHeader
    where traverse = AST.Traversable1.Class.traverseDefault1
data GlobalConstantDecl a
    = GlobalConstantDecl {ann :: a,
                          extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Attribute GHC.Generics.:+: Expression GHC.Generics.:+: OptionallyTypedIdent) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_451 .
                       AST.Traversable1.Class.Traversable1 a_451)
instance AST.Unmarshal.SymbolMatching GlobalConstantDecl
    where matchedSymbols _ = []
          showFailure _ node_452 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_452 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_452) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_453 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_454 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_455 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_456 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_453
                                                        c1_454 = TreeSitter.Node.nodeStartPoint node_452
                                TreeSitter.Node.TSPoint r2_455
                                                        c2_456 = TreeSitter.Node.nodeEndPoint node_452
deriving instance GHC.Classes.Eq a_457 => GHC.Classes.Eq (GlobalConstantDecl a_457)
deriving instance GHC.Classes.Ord a_458 => GHC.Classes.Ord (GlobalConstantDecl a_458)
deriving instance GHC.Show.Show a_459 => GHC.Show.Show (GlobalConstantDecl a_459)
instance AST.Unmarshal.Unmarshal GlobalConstantDecl
instance Data.Foldable.Foldable GlobalConstantDecl
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor GlobalConstantDecl
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable GlobalConstantDecl
    where traverse = AST.Traversable1.Class.traverseDefault1
data GlobalDirective a
    = GlobalDirective {ann :: a,
                       extraChildren :: (AST.Parse.Err (EnableDirective a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_460 .
                       AST.Traversable1.Class.Traversable1 a_460)
instance AST.Unmarshal.SymbolMatching GlobalDirective
    where matchedSymbols _ = []
          showFailure _ node_461 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_461 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_461) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_462 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_463 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_464 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_465 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_462
                                                        c1_463 = TreeSitter.Node.nodeStartPoint node_461
                                TreeSitter.Node.TSPoint r2_464
                                                        c2_465 = TreeSitter.Node.nodeEndPoint node_461
deriving instance GHC.Classes.Eq a_466 => GHC.Classes.Eq (GlobalDirective a_466)
deriving instance GHC.Classes.Ord a_467 => GHC.Classes.Ord (GlobalDirective a_467)
deriving instance GHC.Show.Show a_468 => GHC.Show.Show (GlobalDirective a_468)
instance AST.Unmarshal.Unmarshal GlobalDirective
instance Data.Foldable.Foldable GlobalDirective
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor GlobalDirective
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable GlobalDirective
    where traverse = AST.Traversable1.Class.traverseDefault1
data GlobalVariableDecl a
    = GlobalVariableDecl {ann :: a,
                          extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Attribute GHC.Generics.:+: Expression GHC.Generics.:+: VariableDecl) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_469 .
                       AST.Traversable1.Class.Traversable1 a_469)
instance AST.Unmarshal.SymbolMatching GlobalVariableDecl
    where matchedSymbols _ = []
          showFailure _ node_470 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_470 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_470) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_471 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_472 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_473 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_474 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_471
                                                        c1_472 = TreeSitter.Node.nodeStartPoint node_470
                                TreeSitter.Node.TSPoint r2_473
                                                        c2_474 = TreeSitter.Node.nodeEndPoint node_470
deriving instance GHC.Classes.Eq a_475 => GHC.Classes.Eq (GlobalVariableDecl a_475)
deriving instance GHC.Classes.Ord a_476 => GHC.Classes.Ord (GlobalVariableDecl a_476)
deriving instance GHC.Show.Show a_477 => GHC.Show.Show (GlobalVariableDecl a_477)
instance AST.Unmarshal.Unmarshal GlobalVariableDecl
instance Data.Foldable.Foldable GlobalVariableDecl
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor GlobalVariableDecl
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable GlobalVariableDecl
    where traverse = AST.Traversable1.Class.traverseDefault1
data HexFloatLiteral a
    = HexFloatLiteral {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_478 .
                       AST.Traversable1.Class.Traversable1 a_478)
instance AST.Unmarshal.SymbolMatching HexFloatLiteral
    where matchedSymbols _ = []
          showFailure _ node_479 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_479 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_479) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_480 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_481 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_482 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_483 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_480
                                                        c1_481 = TreeSitter.Node.nodeStartPoint node_479
                                TreeSitter.Node.TSPoint r2_482
                                                        c2_483 = TreeSitter.Node.nodeEndPoint node_479
deriving instance GHC.Classes.Eq a_484 => GHC.Classes.Eq (HexFloatLiteral a_484)
deriving instance GHC.Classes.Ord a_485 => GHC.Classes.Ord (HexFloatLiteral a_485)
deriving instance GHC.Show.Show a_486 => GHC.Show.Show (HexFloatLiteral a_486)
instance AST.Unmarshal.Unmarshal HexFloatLiteral
instance Data.Foldable.Foldable HexFloatLiteral
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor HexFloatLiteral
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable HexFloatLiteral
    where traverse = AST.Traversable1.Class.traverseDefault1
data Ident a
    = Ident {ann :: a,
             extraChildren :: (AST.Parse.Err (IdentPatternToken a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_487 .
                       AST.Traversable1.Class.Traversable1 a_487)
instance AST.Unmarshal.SymbolMatching Ident
    where matchedSymbols _ = []
          showFailure _ node_488 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_488 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_488) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_489 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_490 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_491 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_492 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_489
                                                        c1_490 = TreeSitter.Node.nodeStartPoint node_488
                                TreeSitter.Node.TSPoint r2_491
                                                        c2_492 = TreeSitter.Node.nodeEndPoint node_488
deriving instance GHC.Classes.Eq a_493 => GHC.Classes.Eq (Ident a_493)
deriving instance GHC.Classes.Ord a_494 => GHC.Classes.Ord (Ident a_494)
deriving instance GHC.Show.Show a_495 => GHC.Show.Show (Ident a_495)
instance AST.Unmarshal.Unmarshal Ident
instance Data.Foldable.Foldable Ident
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor Ident
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable Ident
    where traverse = AST.Traversable1.Class.traverseDefault1
data IfClause a
    = IfClause {ann :: a,
                extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((CompoundStatement GHC.Generics.:+: Expression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_496 .
                       AST.Traversable1.Class.Traversable1 a_496)
instance AST.Unmarshal.SymbolMatching IfClause
    where matchedSymbols _ = [186]
          showFailure _ node_497 = "expected " GHC.Base.<> ("if_clause" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_497 GHC.Classes.== 65535
                                                                                                               then "ERROR"
                                                                                                               else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_497) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_498 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_499 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_500 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_501 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_498
                                                        c1_499 = TreeSitter.Node.nodeStartPoint node_497
                                TreeSitter.Node.TSPoint r2_500
                                                        c2_501 = TreeSitter.Node.nodeEndPoint node_497
deriving instance GHC.Classes.Eq a_502 => GHC.Classes.Eq (IfClause a_502)
deriving instance GHC.Classes.Ord a_503 => GHC.Classes.Ord (IfClause a_503)
deriving instance GHC.Show.Show a_504 => GHC.Show.Show (IfClause a_504)
instance AST.Unmarshal.Unmarshal IfClause
instance Data.Foldable.Foldable IfClause
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor IfClause
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable IfClause
    where traverse = AST.Traversable1.Class.traverseDefault1
data IfStatement a
    = IfStatement {ann :: a,
                   extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((ElseClause GHC.Generics.:+: ElseIfClause GHC.Generics.:+: IfClause) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_505 .
                       AST.Traversable1.Class.Traversable1 a_505)
instance AST.Unmarshal.SymbolMatching IfStatement
    where matchedSymbols _ = [123]
          showFailure _ node_506 = "expected " GHC.Base.<> ("if_statement" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_506 GHC.Classes.== 65535
                                                                                                                  then "ERROR"
                                                                                                                  else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_506) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_507 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_508 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_509 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_510 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_507
                                                        c1_508 = TreeSitter.Node.nodeStartPoint node_506
                                TreeSitter.Node.TSPoint r2_509
                                                        c2_510 = TreeSitter.Node.nodeEndPoint node_506
deriving instance GHC.Classes.Eq a_511 => GHC.Classes.Eq (IfStatement a_511)
deriving instance GHC.Classes.Ord a_512 => GHC.Classes.Ord (IfStatement a_512)
deriving instance GHC.Show.Show a_513 => GHC.Show.Show (IfStatement a_513)
instance AST.Unmarshal.Unmarshal IfStatement
instance Data.Foldable.Foldable IfStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor IfStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable IfStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data IncrementStatement a
    = IncrementStatement {ann :: a,
                          extraChildren :: (AST.Parse.Err (LhsExpression a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_514 .
                       AST.Traversable1.Class.Traversable1 a_514)
instance AST.Unmarshal.SymbolMatching IncrementStatement
    where matchedSymbols _ = []
          showFailure _ node_515 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_515 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_515) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_516 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_517 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_518 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_519 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_516
                                                        c1_517 = TreeSitter.Node.nodeStartPoint node_515
                                TreeSitter.Node.TSPoint r2_518
                                                        c2_519 = TreeSitter.Node.nodeEndPoint node_515
deriving instance GHC.Classes.Eq a_520 => GHC.Classes.Eq (IncrementStatement a_520)
deriving instance GHC.Classes.Ord a_521 => GHC.Classes.Ord (IncrementStatement a_521)
deriving instance GHC.Show.Show a_522 => GHC.Show.Show (IncrementStatement a_522)
instance AST.Unmarshal.Unmarshal IncrementStatement
instance Data.Foldable.Foldable IncrementStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor IncrementStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable IncrementStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data IntLiteral a
    = IntLiteral {ann :: a,
                  extraChildren :: (AST.Parse.Err ((DecimalIntLiteral GHC.Generics.:+: HexIntLiteral) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_523 .
                       AST.Traversable1.Class.Traversable1 a_523)
instance AST.Unmarshal.SymbolMatching IntLiteral
    where matchedSymbols _ = []
          showFailure _ node_524 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_524 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_524) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_525 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_526 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_527 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_528 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_525
                                                        c1_526 = TreeSitter.Node.nodeStartPoint node_524
                                TreeSitter.Node.TSPoint r2_527
                                                        c2_528 = TreeSitter.Node.nodeEndPoint node_524
deriving instance GHC.Classes.Eq a_529 => GHC.Classes.Eq (IntLiteral a_529)
deriving instance GHC.Classes.Ord a_530 => GHC.Classes.Ord (IntLiteral a_530)
deriving instance GHC.Show.Show a_531 => GHC.Show.Show (IntLiteral a_531)
instance AST.Unmarshal.Unmarshal IntLiteral
instance Data.Foldable.Foldable IntLiteral
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor IntLiteral
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable IntLiteral
    where traverse = AST.Traversable1.Class.traverseDefault1
data InterpolationSampleName a
    = InterpolationSampleName {ann :: a,
                               text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_532 .
                       AST.Traversable1.Class.Traversable1 a_532)
instance AST.Unmarshal.SymbolMatching InterpolationSampleName
    where matchedSymbols _ = []
          showFailure _ node_533 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_533 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_533) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_534 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_535 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_536 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_537 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_534
                                                        c1_535 = TreeSitter.Node.nodeStartPoint node_533
                                TreeSitter.Node.TSPoint r2_536
                                                        c2_537 = TreeSitter.Node.nodeEndPoint node_533
deriving instance GHC.Classes.Eq a_538 => GHC.Classes.Eq (InterpolationSampleName a_538)
deriving instance GHC.Classes.Ord a_539 => GHC.Classes.Ord (InterpolationSampleName a_539)
deriving instance GHC.Show.Show a_540 => GHC.Show.Show (InterpolationSampleName a_540)
instance AST.Unmarshal.Unmarshal InterpolationSampleName
instance Data.Foldable.Foldable InterpolationSampleName
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor InterpolationSampleName
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable InterpolationSampleName
    where traverse = AST.Traversable1.Class.traverseDefault1
data InterpolationTypeName a
    = InterpolationTypeName {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_541 .
                       AST.Traversable1.Class.Traversable1 a_541)
instance AST.Unmarshal.SymbolMatching InterpolationTypeName
    where matchedSymbols _ = []
          showFailure _ node_542 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_542 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_542) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_543 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_544 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_545 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_546 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_543
                                                        c1_544 = TreeSitter.Node.nodeStartPoint node_542
                                TreeSitter.Node.TSPoint r2_545
                                                        c2_546 = TreeSitter.Node.nodeEndPoint node_542
deriving instance GHC.Classes.Eq a_547 => GHC.Classes.Eq (InterpolationTypeName a_547)
deriving instance GHC.Classes.Ord a_548 => GHC.Classes.Ord (InterpolationTypeName a_548)
deriving instance GHC.Show.Show a_549 => GHC.Show.Show (InterpolationTypeName a_549)
instance AST.Unmarshal.Unmarshal InterpolationTypeName
instance Data.Foldable.Foldable InterpolationTypeName
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor InterpolationTypeName
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable InterpolationTypeName
    where traverse = AST.Traversable1.Class.traverseDefault1
data LhsExpression a
    = LhsExpression {ann :: a,
                     extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((ComponentOrSwizzleSpecifier GHC.Generics.:+: CoreLhsExpression GHC.Generics.:+: LhsExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_550 .
                       AST.Traversable1.Class.Traversable1 a_550)
instance AST.Unmarshal.SymbolMatching LhsExpression
    where matchedSymbols _ = []
          showFailure _ node_551 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_551 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_551) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_552 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_553 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_554 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_555 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_552
                                                        c1_553 = TreeSitter.Node.nodeStartPoint node_551
                                TreeSitter.Node.TSPoint r2_554
                                                        c2_555 = TreeSitter.Node.nodeEndPoint node_551
deriving instance GHC.Classes.Eq a_556 => GHC.Classes.Eq (LhsExpression a_556)
deriving instance GHC.Classes.Ord a_557 => GHC.Classes.Ord (LhsExpression a_557)
deriving instance GHC.Show.Show a_558 => GHC.Show.Show (LhsExpression a_558)
instance AST.Unmarshal.Unmarshal LhsExpression
instance Data.Foldable.Foldable LhsExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor LhsExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable LhsExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data Literal a
    = Literal {ann :: a,
               extraChildren :: (AST.Parse.Err ((BoolLiteral GHC.Generics.:+: FloatLiteral GHC.Generics.:+: IntLiteral) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_559 .
                       AST.Traversable1.Class.Traversable1 a_559)
instance AST.Unmarshal.SymbolMatching Literal
    where matchedSymbols _ = []
          showFailure _ node_560 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_560 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_560) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_561 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_562 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_563 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_564 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_561
                                                        c1_562 = TreeSitter.Node.nodeStartPoint node_560
                                TreeSitter.Node.TSPoint r2_563
                                                        c2_564 = TreeSitter.Node.nodeEndPoint node_560
deriving instance GHC.Classes.Eq a_565 => GHC.Classes.Eq (Literal a_565)
deriving instance GHC.Classes.Ord a_566 => GHC.Classes.Ord (Literal a_566)
deriving instance GHC.Show.Show a_567 => GHC.Show.Show (Literal a_567)
instance AST.Unmarshal.Unmarshal Literal
instance Data.Foldable.Foldable Literal
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor Literal
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable Literal
    where traverse = AST.Traversable1.Class.traverseDefault1
data LoopStatement a
    = LoopStatement {ann :: a,
                     extraChildren :: ([AST.Parse.Err ((ContinuingStatement GHC.Generics.:+: Statement) a)])}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_568 .
                       AST.Traversable1.Class.Traversable1 a_568)
instance AST.Unmarshal.SymbolMatching LoopStatement
    where matchedSymbols _ = []
          showFailure _ node_569 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_569 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_569) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_570 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_571 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_572 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_573 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_570
                                                        c1_571 = TreeSitter.Node.nodeStartPoint node_569
                                TreeSitter.Node.TSPoint r2_572
                                                        c2_573 = TreeSitter.Node.nodeEndPoint node_569
deriving instance GHC.Classes.Eq a_574 => GHC.Classes.Eq (LoopStatement a_574)
deriving instance GHC.Classes.Ord a_575 => GHC.Classes.Ord (LoopStatement a_575)
deriving instance GHC.Show.Show a_576 => GHC.Show.Show (LoopStatement a_576)
instance AST.Unmarshal.Unmarshal LoopStatement
instance Data.Foldable.Foldable LoopStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor LoopStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable LoopStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data MatPrefix a
    = MatPrefix {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_577 .
                       AST.Traversable1.Class.Traversable1 a_577)
instance AST.Unmarshal.SymbolMatching MatPrefix
    where matchedSymbols _ = []
          showFailure _ node_578 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_578 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_578) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_579 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_580 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_581 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_582 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_579
                                                        c1_580 = TreeSitter.Node.nodeStartPoint node_578
                                TreeSitter.Node.TSPoint r2_581
                                                        c2_582 = TreeSitter.Node.nodeEndPoint node_578
deriving instance GHC.Classes.Eq a_583 => GHC.Classes.Eq (MatPrefix a_583)
deriving instance GHC.Classes.Ord a_584 => GHC.Classes.Ord (MatPrefix a_584)
deriving instance GHC.Show.Show a_585 => GHC.Show.Show (MatPrefix a_585)
instance AST.Unmarshal.Unmarshal MatPrefix
instance Data.Foldable.Foldable MatPrefix
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor MatPrefix
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable MatPrefix
    where traverse = AST.Traversable1.Class.traverseDefault1
data MemberIdent a
    = MemberIdent {ann :: a,
                   extraChildren :: (AST.Parse.Err (IdentPatternToken a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_586 .
                       AST.Traversable1.Class.Traversable1 a_586)
instance AST.Unmarshal.SymbolMatching MemberIdent
    where matchedSymbols _ = []
          showFailure _ node_587 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_587 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_587) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_588 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_589 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_590 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_591 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_588
                                                        c1_589 = TreeSitter.Node.nodeStartPoint node_587
                                TreeSitter.Node.TSPoint r2_590
                                                        c2_591 = TreeSitter.Node.nodeEndPoint node_587
deriving instance GHC.Classes.Eq a_592 => GHC.Classes.Eq (MemberIdent a_592)
deriving instance GHC.Classes.Ord a_593 => GHC.Classes.Ord (MemberIdent a_593)
deriving instance GHC.Show.Show a_594 => GHC.Show.Show (MemberIdent a_594)
instance AST.Unmarshal.Unmarshal MemberIdent
instance Data.Foldable.Foldable MemberIdent
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor MemberIdent
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable MemberIdent
    where traverse = AST.Traversable1.Class.traverseDefault1
data MultiplicativeExpression a
    = MultiplicativeExpression {ann :: a,
                                extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((MultiplicativeExpression GHC.Generics.:+: MultiplicativeOperator GHC.Generics.:+: UnaryExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_595 .
                       AST.Traversable1.Class.Traversable1 a_595)
instance AST.Unmarshal.SymbolMatching MultiplicativeExpression
    where matchedSymbols _ = []
          showFailure _ node_596 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_596 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_596) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_597 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_598 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_599 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_600 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_597
                                                        c1_598 = TreeSitter.Node.nodeStartPoint node_596
                                TreeSitter.Node.TSPoint r2_599
                                                        c2_600 = TreeSitter.Node.nodeEndPoint node_596
deriving instance GHC.Classes.Eq a_601 => GHC.Classes.Eq (MultiplicativeExpression a_601)
deriving instance GHC.Classes.Ord a_602 => GHC.Classes.Ord (MultiplicativeExpression a_602)
deriving instance GHC.Show.Show a_603 => GHC.Show.Show (MultiplicativeExpression a_603)
instance AST.Unmarshal.Unmarshal MultiplicativeExpression
instance Data.Foldable.Foldable MultiplicativeExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor MultiplicativeExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable MultiplicativeExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data MultiplicativeOperator a
    = MultiplicativeOperator {ann :: a,
                              text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_604 .
                       AST.Traversable1.Class.Traversable1 a_604)
instance AST.Unmarshal.SymbolMatching MultiplicativeOperator
    where matchedSymbols _ = []
          showFailure _ node_605 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_605 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_605) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_606 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_607 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_608 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_609 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_606
                                                        c1_607 = TreeSitter.Node.nodeStartPoint node_605
                                TreeSitter.Node.TSPoint r2_608
                                                        c2_609 = TreeSitter.Node.nodeEndPoint node_605
deriving instance GHC.Classes.Eq a_610 => GHC.Classes.Eq (MultiplicativeOperator a_610)
deriving instance GHC.Classes.Ord a_611 => GHC.Classes.Ord (MultiplicativeOperator a_611)
deriving instance GHC.Show.Show a_612 => GHC.Show.Show (MultiplicativeOperator a_612)
instance AST.Unmarshal.Unmarshal MultiplicativeOperator
instance Data.Foldable.Foldable MultiplicativeOperator
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor MultiplicativeOperator
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable MultiplicativeOperator
    where traverse = AST.Traversable1.Class.traverseDefault1
data OptionallyTypedIdent a
    = OptionallyTypedIdent {ann :: a,
                            extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Ident GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_613 .
                       AST.Traversable1.Class.Traversable1 a_613)
instance AST.Unmarshal.SymbolMatching OptionallyTypedIdent
    where matchedSymbols _ = []
          showFailure _ node_614 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_614 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_614) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_615 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_616 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_617 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_618 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_615
                                                        c1_616 = TreeSitter.Node.nodeStartPoint node_614
                                TreeSitter.Node.TSPoint r2_617
                                                        c2_618 = TreeSitter.Node.nodeEndPoint node_614
deriving instance GHC.Classes.Eq a_619 => GHC.Classes.Eq (OptionallyTypedIdent a_619)
deriving instance GHC.Classes.Ord a_620 => GHC.Classes.Ord (OptionallyTypedIdent a_620)
deriving instance GHC.Show.Show a_621 => GHC.Show.Show (OptionallyTypedIdent a_621)
instance AST.Unmarshal.Unmarshal OptionallyTypedIdent
instance Data.Foldable.Foldable OptionallyTypedIdent
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor OptionallyTypedIdent
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable OptionallyTypedIdent
    where traverse = AST.Traversable1.Class.traverseDefault1
data Param a
    = Param {ann :: a,
             extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Attribute GHC.Generics.:+: Ident GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_622 .
                       AST.Traversable1.Class.Traversable1 a_622)
instance AST.Unmarshal.SymbolMatching Param
    where matchedSymbols _ = []
          showFailure _ node_623 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_623 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_623) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_624 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_625 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_626 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_627 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_624
                                                        c1_625 = TreeSitter.Node.nodeStartPoint node_623
                                TreeSitter.Node.TSPoint r2_626
                                                        c2_627 = TreeSitter.Node.nodeEndPoint node_623
deriving instance GHC.Classes.Eq a_628 => GHC.Classes.Eq (Param a_628)
deriving instance GHC.Classes.Ord a_629 => GHC.Classes.Ord (Param a_629)
deriving instance GHC.Show.Show a_630 => GHC.Show.Show (Param a_630)
instance AST.Unmarshal.Unmarshal Param
instance Data.Foldable.Foldable Param
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor Param
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable Param
    where traverse = AST.Traversable1.Class.traverseDefault1
data ParamList a
    = ParamList {ann :: a,
                 extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err (Param a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_631 .
                       AST.Traversable1.Class.Traversable1 a_631)
instance AST.Unmarshal.SymbolMatching ParamList
    where matchedSymbols _ = []
          showFailure _ node_632 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_632 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_632) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_633 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_634 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_635 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_636 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_633
                                                        c1_634 = TreeSitter.Node.nodeStartPoint node_632
                                TreeSitter.Node.TSPoint r2_635
                                                        c2_636 = TreeSitter.Node.nodeEndPoint node_632
deriving instance GHC.Classes.Eq a_637 => GHC.Classes.Eq (ParamList a_637)
deriving instance GHC.Classes.Ord a_638 => GHC.Classes.Ord (ParamList a_638)
deriving instance GHC.Show.Show a_639 => GHC.Show.Show (ParamList a_639)
instance AST.Unmarshal.Unmarshal ParamList
instance Data.Foldable.Foldable ParamList
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ParamList
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ParamList
    where traverse = AST.Traversable1.Class.traverseDefault1
data ParenExpression a
    = ParenExpression {ann :: a,
                       extraChildren :: (AST.Parse.Err (Expression a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_640 .
                       AST.Traversable1.Class.Traversable1 a_640)
instance AST.Unmarshal.SymbolMatching ParenExpression
    where matchedSymbols _ = []
          showFailure _ node_641 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_641 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_641) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_642 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_643 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_644 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_645 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_642
                                                        c1_643 = TreeSitter.Node.nodeStartPoint node_641
                                TreeSitter.Node.TSPoint r2_644
                                                        c2_645 = TreeSitter.Node.nodeEndPoint node_641
deriving instance GHC.Classes.Eq a_646 => GHC.Classes.Eq (ParenExpression a_646)
deriving instance GHC.Classes.Ord a_647 => GHC.Classes.Ord (ParenExpression a_647)
deriving instance GHC.Show.Show a_648 => GHC.Show.Show (ParenExpression a_648)
instance AST.Unmarshal.Unmarshal ParenExpression
instance Data.Foldable.Foldable ParenExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ParenExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ParenExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data PrimaryExpression a
    = PrimaryExpression {ann :: a,
                         extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((CallExpression GHC.Generics.:+: Ident GHC.Generics.:+: Literal GHC.Generics.:+: ParenExpression GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_649 .
                       AST.Traversable1.Class.Traversable1 a_649)
instance AST.Unmarshal.SymbolMatching PrimaryExpression
    where matchedSymbols _ = []
          showFailure _ node_650 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_650 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_650) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_651 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_652 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_653 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_654 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_651
                                                        c1_652 = TreeSitter.Node.nodeStartPoint node_650
                                TreeSitter.Node.TSPoint r2_653
                                                        c2_654 = TreeSitter.Node.nodeEndPoint node_650
deriving instance GHC.Classes.Eq a_655 => GHC.Classes.Eq (PrimaryExpression a_655)
deriving instance GHC.Classes.Ord a_656 => GHC.Classes.Ord (PrimaryExpression a_656)
deriving instance GHC.Show.Show a_657 => GHC.Show.Show (PrimaryExpression a_657)
instance AST.Unmarshal.Unmarshal PrimaryExpression
instance Data.Foldable.Foldable PrimaryExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor PrimaryExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable PrimaryExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data RelationalExpression a
    = RelationalExpression {ann :: a,
                            extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err (ShiftExpression a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_658 .
                       AST.Traversable1.Class.Traversable1 a_658)
instance AST.Unmarshal.SymbolMatching RelationalExpression
    where matchedSymbols _ = []
          showFailure _ node_659 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_659 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_659) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_660 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_661 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_662 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_663 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_660
                                                        c1_661 = TreeSitter.Node.nodeStartPoint node_659
                                TreeSitter.Node.TSPoint r2_662
                                                        c2_663 = TreeSitter.Node.nodeEndPoint node_659
deriving instance GHC.Classes.Eq a_664 => GHC.Classes.Eq (RelationalExpression a_664)
deriving instance GHC.Classes.Ord a_665 => GHC.Classes.Ord (RelationalExpression a_665)
deriving instance GHC.Show.Show a_666 => GHC.Show.Show (RelationalExpression a_666)
instance AST.Unmarshal.Unmarshal RelationalExpression
instance Data.Foldable.Foldable RelationalExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor RelationalExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable RelationalExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data ReturnStatement a
    = ReturnStatement {ann :: a,
                       extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (Expression a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_667 .
                       AST.Traversable1.Class.Traversable1 a_667)
instance AST.Unmarshal.SymbolMatching ReturnStatement
    where matchedSymbols _ = [117]
          showFailure _ node_668 = "expected " GHC.Base.<> ("return_statement" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_668 GHC.Classes.== 65535
                                                                                                                      then "ERROR"
                                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_668) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_669 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_670 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_671 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_672 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_669
                                                        c1_670 = TreeSitter.Node.nodeStartPoint node_668
                                TreeSitter.Node.TSPoint r2_671
                                                        c2_672 = TreeSitter.Node.nodeEndPoint node_668
deriving instance GHC.Classes.Eq a_673 => GHC.Classes.Eq (ReturnStatement a_673)
deriving instance GHC.Classes.Ord a_674 => GHC.Classes.Ord (ReturnStatement a_674)
deriving instance GHC.Show.Show a_675 => GHC.Show.Show (ReturnStatement a_675)
instance AST.Unmarshal.Unmarshal ReturnStatement
instance Data.Foldable.Foldable ReturnStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ReturnStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ReturnStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data SampledTextureType a
    = SampledTextureType {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_676 .
                       AST.Traversable1.Class.Traversable1 a_676)
instance AST.Unmarshal.SymbolMatching SampledTextureType
    where matchedSymbols _ = []
          showFailure _ node_677 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_677 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_677) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_678 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_679 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_680 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_681 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_678
                                                        c1_679 = TreeSitter.Node.nodeStartPoint node_677
                                TreeSitter.Node.TSPoint r2_680
                                                        c2_681 = TreeSitter.Node.nodeEndPoint node_677
deriving instance GHC.Classes.Eq a_682 => GHC.Classes.Eq (SampledTextureType a_682)
deriving instance GHC.Classes.Ord a_683 => GHC.Classes.Ord (SampledTextureType a_683)
deriving instance GHC.Show.Show a_684 => GHC.Show.Show (SampledTextureType a_684)
instance AST.Unmarshal.Unmarshal SampledTextureType
instance Data.Foldable.Foldable SampledTextureType
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor SampledTextureType
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable SampledTextureType
    where traverse = AST.Traversable1.Class.traverseDefault1
data SamplerType a
    = SamplerType {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_685 .
                       AST.Traversable1.Class.Traversable1 a_685)
instance AST.Unmarshal.SymbolMatching SamplerType
    where matchedSymbols _ = []
          showFailure _ node_686 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_686 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_686) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_687 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_688 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_689 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_690 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_687
                                                        c1_688 = TreeSitter.Node.nodeStartPoint node_686
                                TreeSitter.Node.TSPoint r2_689
                                                        c2_690 = TreeSitter.Node.nodeEndPoint node_686
deriving instance GHC.Classes.Eq a_691 => GHC.Classes.Eq (SamplerType a_691)
deriving instance GHC.Classes.Ord a_692 => GHC.Classes.Ord (SamplerType a_692)
deriving instance GHC.Show.Show a_693 => GHC.Show.Show (SamplerType a_693)
instance AST.Unmarshal.Unmarshal SamplerType
instance Data.Foldable.Foldable SamplerType
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor SamplerType
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable SamplerType
    where traverse = AST.Traversable1.Class.traverseDefault1
data ShiftExpression a
    = ShiftExpression {ann :: a,
                       extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((AdditiveExpression GHC.Generics.:+: UnaryExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_694 .
                       AST.Traversable1.Class.Traversable1 a_694)
instance AST.Unmarshal.SymbolMatching ShiftExpression
    where matchedSymbols _ = []
          showFailure _ node_695 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_695 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_695) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_696 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_697 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_698 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_699 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_696
                                                        c1_697 = TreeSitter.Node.nodeStartPoint node_695
                                TreeSitter.Node.TSPoint r2_698
                                                        c2_699 = TreeSitter.Node.nodeEndPoint node_695
deriving instance GHC.Classes.Eq a_700 => GHC.Classes.Eq (ShiftExpression a_700)
deriving instance GHC.Classes.Ord a_701 => GHC.Classes.Ord (ShiftExpression a_701)
deriving instance GHC.Show.Show a_702 => GHC.Show.Show (ShiftExpression a_702)
instance AST.Unmarshal.Unmarshal ShiftExpression
instance Data.Foldable.Foldable ShiftExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ShiftExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ShiftExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data ShortCircuitAndExpression a
    = ShortCircuitAndExpression {ann :: a,
                                 extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((RelationalExpression GHC.Generics.:+: ShortCircuitAndExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_703 .
                       AST.Traversable1.Class.Traversable1 a_703)
instance AST.Unmarshal.SymbolMatching ShortCircuitAndExpression
    where matchedSymbols _ = []
          showFailure _ node_704 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_704 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_704) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_705 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_706 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_707 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_708 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_705
                                                        c1_706 = TreeSitter.Node.nodeStartPoint node_704
                                TreeSitter.Node.TSPoint r2_707
                                                        c2_708 = TreeSitter.Node.nodeEndPoint node_704
deriving instance GHC.Classes.Eq a_709 => GHC.Classes.Eq (ShortCircuitAndExpression a_709)
deriving instance GHC.Classes.Ord a_710 => GHC.Classes.Ord (ShortCircuitAndExpression a_710)
deriving instance GHC.Show.Show a_711 => GHC.Show.Show (ShortCircuitAndExpression a_711)
instance AST.Unmarshal.Unmarshal ShortCircuitAndExpression
instance Data.Foldable.Foldable ShortCircuitAndExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ShortCircuitAndExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ShortCircuitAndExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data ShortCircuitOrExpression a
    = ShortCircuitOrExpression {ann :: a,
                                extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((RelationalExpression GHC.Generics.:+: ShortCircuitOrExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_712 .
                       AST.Traversable1.Class.Traversable1 a_712)
instance AST.Unmarshal.SymbolMatching ShortCircuitOrExpression
    where matchedSymbols _ = []
          showFailure _ node_713 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_713 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_713) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_714 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_715 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_716 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_717 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_714
                                                        c1_715 = TreeSitter.Node.nodeStartPoint node_713
                                TreeSitter.Node.TSPoint r2_716
                                                        c2_717 = TreeSitter.Node.nodeEndPoint node_713
deriving instance GHC.Classes.Eq a_718 => GHC.Classes.Eq (ShortCircuitOrExpression a_718)
deriving instance GHC.Classes.Ord a_719 => GHC.Classes.Ord (ShortCircuitOrExpression a_719)
deriving instance GHC.Show.Show a_720 => GHC.Show.Show (ShortCircuitOrExpression a_720)
instance AST.Unmarshal.Unmarshal ShortCircuitOrExpression
instance Data.Foldable.Foldable ShortCircuitOrExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ShortCircuitOrExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ShortCircuitOrExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data SingularExpression a
    = SingularExpression {ann :: a,
                          extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((ComponentOrSwizzleSpecifier GHC.Generics.:+: PrimaryExpression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_721 .
                       AST.Traversable1.Class.Traversable1 a_721)
instance AST.Unmarshal.SymbolMatching SingularExpression
    where matchedSymbols _ = []
          showFailure _ node_722 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_722 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_722) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_723 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_724 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_725 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_726 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_723
                                                        c1_724 = TreeSitter.Node.nodeStartPoint node_722
                                TreeSitter.Node.TSPoint r2_725
                                                        c2_726 = TreeSitter.Node.nodeEndPoint node_722
deriving instance GHC.Classes.Eq a_727 => GHC.Classes.Eq (SingularExpression a_727)
deriving instance GHC.Classes.Ord a_728 => GHC.Classes.Ord (SingularExpression a_728)
deriving instance GHC.Show.Show a_729 => GHC.Show.Show (SingularExpression a_729)
instance AST.Unmarshal.Unmarshal SingularExpression
instance Data.Foldable.Foldable SingularExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor SingularExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable SingularExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data Statement a
    = Statement {ann :: a,
                 extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err ((BreakStatement GHC.Generics.:+: CompoundStatement GHC.Generics.:+: ConstAssertStatement GHC.Generics.:+: ContinueStatement GHC.Generics.:+: ForStatement GHC.Generics.:+: FuncCallStatement GHC.Generics.:+: IfStatement GHC.Generics.:+: LoopStatement GHC.Generics.:+: ReturnStatement GHC.Generics.:+: SwitchStatement GHC.Generics.:+: VariableStatement GHC.Generics.:+: VariableUpdatingStatement GHC.Generics.:+: WhileStatement) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_730 .
                       AST.Traversable1.Class.Traversable1 a_730)
instance AST.Unmarshal.SymbolMatching Statement
    where matchedSymbols _ = []
          showFailure _ node_731 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_731 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_731) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_732 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_733 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_734 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_735 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_732
                                                        c1_733 = TreeSitter.Node.nodeStartPoint node_731
                                TreeSitter.Node.TSPoint r2_734
                                                        c2_735 = TreeSitter.Node.nodeEndPoint node_731
deriving instance GHC.Classes.Eq a_736 => GHC.Classes.Eq (Statement a_736)
deriving instance GHC.Classes.Ord a_737 => GHC.Classes.Ord (Statement a_737)
deriving instance GHC.Show.Show a_738 => GHC.Show.Show (Statement a_738)
instance AST.Unmarshal.Unmarshal Statement
instance Data.Foldable.Foldable Statement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor Statement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable Statement
    where traverse = AST.Traversable1.Class.traverseDefault1
data StorageTextureType a
    = StorageTextureType {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_739 .
                       AST.Traversable1.Class.Traversable1 a_739)
instance AST.Unmarshal.SymbolMatching StorageTextureType
    where matchedSymbols _ = []
          showFailure _ node_740 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_740 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_740) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_741 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_742 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_743 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_744 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_741
                                                        c1_742 = TreeSitter.Node.nodeStartPoint node_740
                                TreeSitter.Node.TSPoint r2_743
                                                        c2_744 = TreeSitter.Node.nodeEndPoint node_740
deriving instance GHC.Classes.Eq a_745 => GHC.Classes.Eq (StorageTextureType a_745)
deriving instance GHC.Classes.Ord a_746 => GHC.Classes.Ord (StorageTextureType a_746)
deriving instance GHC.Show.Show a_747 => GHC.Show.Show (StorageTextureType a_747)
instance AST.Unmarshal.Unmarshal StorageTextureType
instance Data.Foldable.Foldable StorageTextureType
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor StorageTextureType
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable StorageTextureType
    where traverse = AST.Traversable1.Class.traverseDefault1
data StructBodyDecl a
    = StructBodyDecl {ann :: a,
                      extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err (StructMember a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_748 .
                       AST.Traversable1.Class.Traversable1 a_748)
instance AST.Unmarshal.SymbolMatching StructBodyDecl
    where matchedSymbols _ = []
          showFailure _ node_749 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_749 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_749) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_750 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_751 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_752 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_753 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_750
                                                        c1_751 = TreeSitter.Node.nodeStartPoint node_749
                                TreeSitter.Node.TSPoint r2_752
                                                        c2_753 = TreeSitter.Node.nodeEndPoint node_749
deriving instance GHC.Classes.Eq a_754 => GHC.Classes.Eq (StructBodyDecl a_754)
deriving instance GHC.Classes.Ord a_755 => GHC.Classes.Ord (StructBodyDecl a_755)
deriving instance GHC.Show.Show a_756 => GHC.Show.Show (StructBodyDecl a_756)
instance AST.Unmarshal.Unmarshal StructBodyDecl
instance Data.Foldable.Foldable StructBodyDecl
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor StructBodyDecl
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable StructBodyDecl
    where traverse = AST.Traversable1.Class.traverseDefault1
data StructDecl a
    = StructDecl {ann :: a,
                  extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Ident GHC.Generics.:+: StructBodyDecl) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_757 .
                       AST.Traversable1.Class.Traversable1 a_757)
instance AST.Unmarshal.SymbolMatching StructDecl
    where matchedSymbols _ = []
          showFailure _ node_758 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_758 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_758) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_759 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_760 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_761 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_762 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_759
                                                        c1_760 = TreeSitter.Node.nodeStartPoint node_758
                                TreeSitter.Node.TSPoint r2_761
                                                        c2_762 = TreeSitter.Node.nodeEndPoint node_758
deriving instance GHC.Classes.Eq a_763 => GHC.Classes.Eq (StructDecl a_763)
deriving instance GHC.Classes.Ord a_764 => GHC.Classes.Ord (StructDecl a_764)
deriving instance GHC.Show.Show a_765 => GHC.Show.Show (StructDecl a_765)
instance AST.Unmarshal.Unmarshal StructDecl
instance Data.Foldable.Foldable StructDecl
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor StructDecl
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable StructDecl
    where traverse = AST.Traversable1.Class.traverseDefault1
data StructMember a
    = StructMember {ann :: a,
                    extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Attribute GHC.Generics.:+: MemberIdent GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_766 .
                       AST.Traversable1.Class.Traversable1 a_766)
instance AST.Unmarshal.SymbolMatching StructMember
    where matchedSymbols _ = []
          showFailure _ node_767 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_767 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_767) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_768 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_769 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_770 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_771 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_768
                                                        c1_769 = TreeSitter.Node.nodeStartPoint node_767
                                TreeSitter.Node.TSPoint r2_770
                                                        c2_771 = TreeSitter.Node.nodeEndPoint node_767
deriving instance GHC.Classes.Eq a_772 => GHC.Classes.Eq (StructMember a_772)
deriving instance GHC.Classes.Ord a_773 => GHC.Classes.Ord (StructMember a_773)
deriving instance GHC.Show.Show a_774 => GHC.Show.Show (StructMember a_774)
instance AST.Unmarshal.Unmarshal StructMember
instance Data.Foldable.Foldable StructMember
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor StructMember
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable StructMember
    where traverse = AST.Traversable1.Class.traverseDefault1
data SwitchBody a
    = SwitchBody {ann :: a,
                  extraChildren :: (AST.Parse.Err ((CaseClause GHC.Generics.:+: DefaultAloneClause) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_775 .
                       AST.Traversable1.Class.Traversable1 a_775)
instance AST.Unmarshal.SymbolMatching SwitchBody
    where matchedSymbols _ = []
          showFailure _ node_776 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_776 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_776) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_777 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_778 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_779 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_780 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_777
                                                        c1_778 = TreeSitter.Node.nodeStartPoint node_776
                                TreeSitter.Node.TSPoint r2_779
                                                        c2_780 = TreeSitter.Node.nodeEndPoint node_776
deriving instance GHC.Classes.Eq a_781 => GHC.Classes.Eq (SwitchBody a_781)
deriving instance GHC.Classes.Ord a_782 => GHC.Classes.Ord (SwitchBody a_782)
deriving instance GHC.Show.Show a_783 => GHC.Show.Show (SwitchBody a_783)
instance AST.Unmarshal.Unmarshal SwitchBody
instance Data.Foldable.Foldable SwitchBody
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor SwitchBody
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable SwitchBody
    where traverse = AST.Traversable1.Class.traverseDefault1
data SwitchStatement a
    = SwitchStatement {ann :: a,
                       extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Expression GHC.Generics.:+: SwitchBody) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_784 .
                       AST.Traversable1.Class.Traversable1 a_784)
instance AST.Unmarshal.SymbolMatching SwitchStatement
    where matchedSymbols _ = []
          showFailure _ node_785 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_785 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_785) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_786 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_787 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_788 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_789 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_786
                                                        c1_787 = TreeSitter.Node.nodeStartPoint node_785
                                TreeSitter.Node.TSPoint r2_788
                                                        c2_789 = TreeSitter.Node.nodeEndPoint node_785
deriving instance GHC.Classes.Eq a_790 => GHC.Classes.Eq (SwitchStatement a_790)
deriving instance GHC.Classes.Ord a_791 => GHC.Classes.Ord (SwitchStatement a_791)
deriving instance GHC.Show.Show a_792 => GHC.Show.Show (SwitchStatement a_792)
instance AST.Unmarshal.Unmarshal SwitchStatement
instance Data.Foldable.Foldable SwitchStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor SwitchStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable SwitchStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data SwizzleName a
    = SwizzleName {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_793 .
                       AST.Traversable1.Class.Traversable1 a_793)
instance AST.Unmarshal.SymbolMatching SwizzleName
    where matchedSymbols _ = []
          showFailure _ node_794 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_794 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_794) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_795 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_796 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_797 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_798 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_795
                                                        c1_796 = TreeSitter.Node.nodeStartPoint node_794
                                TreeSitter.Node.TSPoint r2_797
                                                        c2_798 = TreeSitter.Node.nodeEndPoint node_794
deriving instance GHC.Classes.Eq a_799 => GHC.Classes.Eq (SwizzleName a_799)
deriving instance GHC.Classes.Ord a_800 => GHC.Classes.Ord (SwizzleName a_800)
deriving instance GHC.Show.Show a_801 => GHC.Show.Show (SwizzleName a_801)
instance AST.Unmarshal.Unmarshal SwizzleName
instance Data.Foldable.Foldable SwizzleName
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor SwizzleName
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable SwizzleName
    where traverse = AST.Traversable1.Class.traverseDefault1
data TexelFormat a
    = TexelFormat {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_802 .
                       AST.Traversable1.Class.Traversable1 a_802)
instance AST.Unmarshal.SymbolMatching TexelFormat
    where matchedSymbols _ = []
          showFailure _ node_803 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_803 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_803) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_804 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_805 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_806 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_807 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_804
                                                        c1_805 = TreeSitter.Node.nodeStartPoint node_803
                                TreeSitter.Node.TSPoint r2_806
                                                        c2_807 = TreeSitter.Node.nodeEndPoint node_803
deriving instance GHC.Classes.Eq a_808 => GHC.Classes.Eq (TexelFormat a_808)
deriving instance GHC.Classes.Ord a_809 => GHC.Classes.Ord (TexelFormat a_809)
deriving instance GHC.Show.Show a_810 => GHC.Show.Show (TexelFormat a_810)
instance AST.Unmarshal.Unmarshal TexelFormat
instance Data.Foldable.Foldable TexelFormat
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor TexelFormat
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable TexelFormat
    where traverse = AST.Traversable1.Class.traverseDefault1
data TextureAndSamplerTypes a
    = TextureAndSamplerTypes {ann :: a,
                              extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((AccessMode GHC.Generics.:+: DepthTextureType GHC.Generics.:+: MultisampledTextureType GHC.Generics.:+: SampledTextureType GHC.Generics.:+: SamplerType GHC.Generics.:+: StorageTextureType GHC.Generics.:+: TexelFormat GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_811 .
                       AST.Traversable1.Class.Traversable1 a_811)
instance AST.Unmarshal.SymbolMatching TextureAndSamplerTypes
    where matchedSymbols _ = []
          showFailure _ node_812 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_812 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_812) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_813 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_814 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_815 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_816 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_813
                                                        c1_814 = TreeSitter.Node.nodeStartPoint node_812
                                TreeSitter.Node.TSPoint r2_815
                                                        c2_816 = TreeSitter.Node.nodeEndPoint node_812
deriving instance GHC.Classes.Eq a_817 => GHC.Classes.Eq (TextureAndSamplerTypes a_817)
deriving instance GHC.Classes.Ord a_818 => GHC.Classes.Ord (TextureAndSamplerTypes a_818)
deriving instance GHC.Show.Show a_819 => GHC.Show.Show (TextureAndSamplerTypes a_819)
instance AST.Unmarshal.Unmarshal TextureAndSamplerTypes
instance Data.Foldable.Foldable TextureAndSamplerTypes
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor TextureAndSamplerTypes
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable TextureAndSamplerTypes
    where traverse = AST.Traversable1.Class.traverseDefault1
data TranslationUnit a
    = TranslationUnit {ann :: a,
                       extraChildren :: ([AST.Parse.Err ((ConstAssertStatement GHC.Generics.:+: FunctionDecl GHC.Generics.:+: GlobalConstantDecl GHC.Generics.:+: GlobalDirective GHC.Generics.:+: GlobalVariableDecl GHC.Generics.:+: StructDecl GHC.Generics.:+: TypeAliasDecl) a)])}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_820 .
                       AST.Traversable1.Class.Traversable1 a_820)
instance AST.Unmarshal.SymbolMatching TranslationUnit
    where matchedSymbols _ = []
          showFailure _ node_821 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_821 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_821) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_822 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_823 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_824 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_825 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_822
                                                        c1_823 = TreeSitter.Node.nodeStartPoint node_821
                                TreeSitter.Node.TSPoint r2_824
                                                        c2_825 = TreeSitter.Node.nodeEndPoint node_821
deriving instance GHC.Classes.Eq a_826 => GHC.Classes.Eq (TranslationUnit a_826)
deriving instance GHC.Classes.Ord a_827 => GHC.Classes.Ord (TranslationUnit a_827)
deriving instance GHC.Show.Show a_828 => GHC.Show.Show (TranslationUnit a_828)
instance AST.Unmarshal.Unmarshal TranslationUnit
instance Data.Foldable.Foldable TranslationUnit
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor TranslationUnit
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable TranslationUnit
    where traverse = AST.Traversable1.Class.traverseDefault1
data TypeAliasDecl a
    = TypeAliasDecl {ann :: a,
                     extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Ident GHC.Generics.:+: TypeSpecifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_829 .
                       AST.Traversable1.Class.Traversable1 a_829)
instance AST.Unmarshal.SymbolMatching TypeAliasDecl
    where matchedSymbols _ = []
          showFailure _ node_830 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_830 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_830) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_831 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_832 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_833 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_834 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_831
                                                        c1_832 = TreeSitter.Node.nodeStartPoint node_830
                                TreeSitter.Node.TSPoint r2_833
                                                        c2_834 = TreeSitter.Node.nodeEndPoint node_830
deriving instance GHC.Classes.Eq a_835 => GHC.Classes.Eq (TypeAliasDecl a_835)
deriving instance GHC.Classes.Ord a_836 => GHC.Classes.Ord (TypeAliasDecl a_836)
deriving instance GHC.Show.Show a_837 => GHC.Show.Show (TypeAliasDecl a_837)
instance AST.Unmarshal.Unmarshal TypeAliasDecl
instance Data.Foldable.Foldable TypeAliasDecl
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor TypeAliasDecl
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable TypeAliasDecl
    where traverse = AST.Traversable1.Class.traverseDefault1
data TypeSpecifier a
    = TypeSpecifier {ann :: a,
                     extraChildren :: (AST.Parse.Err ((Ident GHC.Generics.:+: TypeSpecifierWithoutIdent) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_838 .
                       AST.Traversable1.Class.Traversable1 a_838)
instance AST.Unmarshal.SymbolMatching TypeSpecifier
    where matchedSymbols _ = []
          showFailure _ node_839 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_839 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_839) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_840 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_841 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_842 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_843 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_840
                                                        c1_841 = TreeSitter.Node.nodeStartPoint node_839
                                TreeSitter.Node.TSPoint r2_842
                                                        c2_843 = TreeSitter.Node.nodeEndPoint node_839
deriving instance GHC.Classes.Eq a_844 => GHC.Classes.Eq (TypeSpecifier a_844)
deriving instance GHC.Classes.Ord a_845 => GHC.Classes.Ord (TypeSpecifier a_845)
deriving instance GHC.Show.Show a_846 => GHC.Show.Show (TypeSpecifier a_846)
instance AST.Unmarshal.Unmarshal TypeSpecifier
instance Data.Foldable.Foldable TypeSpecifier
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor TypeSpecifier
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable TypeSpecifier
    where traverse = AST.Traversable1.Class.traverseDefault1
data TypeSpecifierWithoutIdent a
    = TypeSpecifierWithoutIdent {ann :: a,
                                 extraChildren :: ([AST.Parse.Err ((AccessMode GHC.Generics.:+: AddressSpace GHC.Generics.:+: ArrayTypeSpecifier GHC.Generics.:+: MatPrefix GHC.Generics.:+: TextureAndSamplerTypes GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: VecPrefix) a)])}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_847 .
                       AST.Traversable1.Class.Traversable1 a_847)
instance AST.Unmarshal.SymbolMatching TypeSpecifierWithoutIdent
    where matchedSymbols _ = []
          showFailure _ node_848 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_848 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_848) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_849 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_850 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_851 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_852 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_849
                                                        c1_850 = TreeSitter.Node.nodeStartPoint node_848
                                TreeSitter.Node.TSPoint r2_851
                                                        c2_852 = TreeSitter.Node.nodeEndPoint node_848
deriving instance GHC.Classes.Eq a_853 => GHC.Classes.Eq (TypeSpecifierWithoutIdent a_853)
deriving instance GHC.Classes.Ord a_854 => GHC.Classes.Ord (TypeSpecifierWithoutIdent a_854)
deriving instance GHC.Show.Show a_855 => GHC.Show.Show (TypeSpecifierWithoutIdent a_855)
instance AST.Unmarshal.Unmarshal TypeSpecifierWithoutIdent
instance Data.Foldable.Foldable TypeSpecifierWithoutIdent
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor TypeSpecifierWithoutIdent
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable TypeSpecifierWithoutIdent
    where traverse = AST.Traversable1.Class.traverseDefault1
data UnaryExpression a
    = UnaryExpression {ann :: a,
                       extraChildren :: (AST.Parse.Err ((SingularExpression GHC.Generics.:+: UnaryExpression) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_856 .
                       AST.Traversable1.Class.Traversable1 a_856)
instance AST.Unmarshal.SymbolMatching UnaryExpression
    where matchedSymbols _ = []
          showFailure _ node_857 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_857 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_857) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_858 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_859 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_860 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_861 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_858
                                                        c1_859 = TreeSitter.Node.nodeStartPoint node_857
                                TreeSitter.Node.TSPoint r2_860
                                                        c2_861 = TreeSitter.Node.nodeEndPoint node_857
deriving instance GHC.Classes.Eq a_862 => GHC.Classes.Eq (UnaryExpression a_862)
deriving instance GHC.Classes.Ord a_863 => GHC.Classes.Ord (UnaryExpression a_863)
deriving instance GHC.Show.Show a_864 => GHC.Show.Show (UnaryExpression a_864)
instance AST.Unmarshal.Unmarshal UnaryExpression
instance Data.Foldable.Foldable UnaryExpression
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor UnaryExpression
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable UnaryExpression
    where traverse = AST.Traversable1.Class.traverseDefault1
data VariableDecl a
    = VariableDecl {ann :: a,
                    extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((OptionallyTypedIdent GHC.Generics.:+: VariableQualifier) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_865 .
                       AST.Traversable1.Class.Traversable1 a_865)
instance AST.Unmarshal.SymbolMatching VariableDecl
    where matchedSymbols _ = []
          showFailure _ node_866 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_866 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_866) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_867 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_868 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_869 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_870 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_867
                                                        c1_868 = TreeSitter.Node.nodeStartPoint node_866
                                TreeSitter.Node.TSPoint r2_869
                                                        c2_870 = TreeSitter.Node.nodeEndPoint node_866
deriving instance GHC.Classes.Eq a_871 => GHC.Classes.Eq (VariableDecl a_871)
deriving instance GHC.Classes.Ord a_872 => GHC.Classes.Ord (VariableDecl a_872)
deriving instance GHC.Show.Show a_873 => GHC.Show.Show (VariableDecl a_873)
instance AST.Unmarshal.Unmarshal VariableDecl
instance Data.Foldable.Foldable VariableDecl
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor VariableDecl
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable VariableDecl
    where traverse = AST.Traversable1.Class.traverseDefault1
data VariableQualifier a
    = VariableQualifier {ann :: a,
                         extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((AccessMode GHC.Generics.:+: AddressSpace) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_874 .
                       AST.Traversable1.Class.Traversable1 a_874)
instance AST.Unmarshal.SymbolMatching VariableQualifier
    where matchedSymbols _ = []
          showFailure _ node_875 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_875 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_875) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_876 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_877 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_878 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_879 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_876
                                                        c1_877 = TreeSitter.Node.nodeStartPoint node_875
                                TreeSitter.Node.TSPoint r2_878
                                                        c2_879 = TreeSitter.Node.nodeEndPoint node_875
deriving instance GHC.Classes.Eq a_880 => GHC.Classes.Eq (VariableQualifier a_880)
deriving instance GHC.Classes.Ord a_881 => GHC.Classes.Ord (VariableQualifier a_881)
deriving instance GHC.Show.Show a_882 => GHC.Show.Show (VariableQualifier a_882)
instance AST.Unmarshal.Unmarshal VariableQualifier
instance Data.Foldable.Foldable VariableQualifier
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor VariableQualifier
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable VariableQualifier
    where traverse = AST.Traversable1.Class.traverseDefault1
data VariableStatement a
    = VariableStatement {ann :: a,
                         extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((Expression GHC.Generics.:+: OptionallyTypedIdent GHC.Generics.:+: VariableDecl) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_883 .
                       AST.Traversable1.Class.Traversable1 a_883)
instance AST.Unmarshal.SymbolMatching VariableStatement
    where matchedSymbols _ = []
          showFailure _ node_884 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_884 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_884) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_885 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_886 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_887 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_888 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_885
                                                        c1_886 = TreeSitter.Node.nodeStartPoint node_884
                                TreeSitter.Node.TSPoint r2_887
                                                        c2_888 = TreeSitter.Node.nodeEndPoint node_884
deriving instance GHC.Classes.Eq a_889 => GHC.Classes.Eq (VariableStatement a_889)
deriving instance GHC.Classes.Ord a_890 => GHC.Classes.Ord (VariableStatement a_890)
deriving instance GHC.Show.Show a_891 => GHC.Show.Show (VariableStatement a_891)
instance AST.Unmarshal.Unmarshal VariableStatement
instance Data.Foldable.Foldable VariableStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor VariableStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable VariableStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data VariableUpdatingStatement a
    = VariableUpdatingStatement {ann :: a,
                                 extraChildren :: (AST.Parse.Err ((AssignmentStatement GHC.Generics.:+: DecrementStatement GHC.Generics.:+: IncrementStatement) a))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_892 .
                       AST.Traversable1.Class.Traversable1 a_892)
instance AST.Unmarshal.SymbolMatching VariableUpdatingStatement
    where matchedSymbols _ = []
          showFailure _ node_893 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_893 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_893) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_894 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_895 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_896 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_897 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_894
                                                        c1_895 = TreeSitter.Node.nodeStartPoint node_893
                                TreeSitter.Node.TSPoint r2_896
                                                        c2_897 = TreeSitter.Node.nodeEndPoint node_893
deriving instance GHC.Classes.Eq a_898 => GHC.Classes.Eq (VariableUpdatingStatement a_898)
deriving instance GHC.Classes.Ord a_899 => GHC.Classes.Ord (VariableUpdatingStatement a_899)
deriving instance GHC.Show.Show a_900 => GHC.Show.Show (VariableUpdatingStatement a_900)
instance AST.Unmarshal.Unmarshal VariableUpdatingStatement
instance Data.Foldable.Foldable VariableUpdatingStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor VariableUpdatingStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable VariableUpdatingStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
data VecPrefix a
    = VecPrefix {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_901 .
                       AST.Traversable1.Class.Traversable1 a_901)
instance AST.Unmarshal.SymbolMatching VecPrefix
    where matchedSymbols _ = []
          showFailure _ node_902 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_902 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_902) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_903 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_904 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_905 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_906 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_903
                                                        c1_904 = TreeSitter.Node.nodeStartPoint node_902
                                TreeSitter.Node.TSPoint r2_905
                                                        c2_906 = TreeSitter.Node.nodeEndPoint node_902
deriving instance GHC.Classes.Eq a_907 => GHC.Classes.Eq (VecPrefix a_907)
deriving instance GHC.Classes.Ord a_908 => GHC.Classes.Ord (VecPrefix a_908)
deriving instance GHC.Show.Show a_909 => GHC.Show.Show (VecPrefix a_909)
instance AST.Unmarshal.Unmarshal VecPrefix
instance Data.Foldable.Foldable VecPrefix
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor VecPrefix
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable VecPrefix
    where traverse = AST.Traversable1.Class.traverseDefault1
data WhileStatement a
    = WhileStatement {ann :: a,
                      extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err ((CompoundStatement GHC.Generics.:+: Expression) a)))}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_910 .
                       AST.Traversable1.Class.Traversable1 a_910)
instance AST.Unmarshal.SymbolMatching WhileStatement
    where matchedSymbols _ = [127]
          showFailure _ node_911 = "expected " GHC.Base.<> ("while_statement" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_911 GHC.Classes.== 65535
                                                                                                                     then "ERROR"
                                                                                                                     else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_911) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_912 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_913 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_914 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_915 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_912
                                                        c1_913 = TreeSitter.Node.nodeStartPoint node_911
                                TreeSitter.Node.TSPoint r2_914
                                                        c2_915 = TreeSitter.Node.nodeEndPoint node_911
deriving instance GHC.Classes.Eq a_916 => GHC.Classes.Eq (WhileStatement a_916)
deriving instance GHC.Classes.Ord a_917 => GHC.Classes.Ord (WhileStatement a_917)
deriving instance GHC.Show.Show a_918 => GHC.Show.Show (WhileStatement a_918)
instance AST.Unmarshal.Unmarshal WhileStatement
instance Data.Foldable.Foldable WhileStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor WhileStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable WhileStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
type AnonymousBang = AST.Token.Token "!" 0
type AnonymousBangEqual = AST.Token.Token "!=" 58
type AnonymousPercent = AST.Token.Token "%" 48
type AnonymousPercentEqual = AST.Token.Token "%=" 70
type AnonymousAmpersand = AST.Token.Token "&" 51
type AnonymousAmpersandAmpersand = AST.Token.Token "&&" 0
type AnonymousAmpersandEqual = AST.Token.Token "&=" 74
type AnonymousLParen = AST.Token.Token "(" 6
type AnonymousRParen = AST.Token.Token ")" 7
type AnonymousStar = AST.Token.Token "*" 10
type AnonymousStarEqual = AST.Token.Token "*=" 66
type AnonymousPlus = AST.Token.Token "+" 45
type AnonymousPlusPlus = AST.Token.Token "++" 0
type AnonymousPlusEqual = AST.Token.Token "+=" 64
type AnonymousComma = AST.Token.Token "," 8
type AnonymousMinus = AST.Token.Token "-" 46
type AnonymousMinusMinus = AST.Token.Token "--" 0
type AnonymousMinusEqual = AST.Token.Token "-=" 65
type AnonymousMinusRAngle = AST.Token.Token "->" 34
type AnonymousDot = AST.Token.Token "." 3
type AnonymousSlash = AST.Token.Token "/" 47
type AnonymousSlashEqual = AST.Token.Token "/=" 67
type AnonymousSlashLBracketrgbaRBracketSlash = AST.Token.Token "/[rgba]/"
                                                               0
type AnonymousSlashLBracketrgbaRBracketLBracketrgbaRBracketSlash = AST.Token.Token "/[rgba][rgba]/"
                                                                                   0
type AnonymousSlashLBracketrgbaRBracketLBracketrgbaRBracketLBracketrgbaRBracketSlash = AST.Token.Token "/[rgba][rgba][rgba]/"
                                                                                                       0
type AnonymousSlashLBracketrgbaRBracketLBracketrgbaRBracketLBracketrgbaRBracketLBracketrgbaRBracketSlash = AST.Token.Token "/[rgba][rgba][rgba][rgba]/"
                                                                                                                           0
type AnonymousSlashLBracketxyzwRBracketSlash = AST.Token.Token "/[xyzw]/"
                                                               0
type AnonymousSlashLBracketxyzwRBracketLBracketxyzwRBracketSlash = AST.Token.Token "/[xyzw][xyzw]/"
                                                                                   0
type AnonymousSlashLBracketxyzwRBracketLBracketxyzwRBracketLBracketxyzwRBracketSlash = AST.Token.Token "/[xyzw][xyzw][xyzw]/"
                                                                                                       0
type AnonymousSlashLBracketxyzwRBracketLBracketxyzwRBracketLBracketxyzwRBracketLBracketxyzwRBracketSlash = AST.Token.Token "/[xyzw][xyzw][xyzw][xyzw]/"
                                                                                                                           0
type AnonymousColon = AST.Token.Token ":" 22
type AnonymousSemicolon = AST.Token.Token ";" 0
type AnonymousEqual = AST.Token.Token "=" 35
type AnonymousEqualEqual = AST.Token.Token "==" 57
type AnonymousAt = AST.Token.Token "@" 41
type AnonymousCompileShader = AST.Token.Token "CompileShader" 0
type AnonymousComputeShader = AST.Token.Token "ComputeShader" 0
type AnonymousDomainShader = AST.Token.Token "DomainShader" 0
type AnonymousGeometryShader = AST.Token.Token "GeometryShader" 0
type AnonymousHullshader = AST.Token.Token "Hullshader" 0
type AnonymousNULL = AST.Token.Token "NULL" 0
type AnonymousSelf = AST.Token.Token "Self" 0
type AnonymousLBracket = AST.Token.Token "[" 78
type AnonymousRBracket = AST.Token.Token "]" 79
type AnonymousCaret = AST.Token.Token "^" 52
type AnonymousCaretEqual = AST.Token.Token "^=" 75
type Anonymous = AST.Token.Token "_" 0
type AnonymousAbstract = AST.Token.Token "abstract" 0
type AnonymousActive = AST.Token.Token "active" 0
type AnonymousAlias = AST.Token.Token "alias" 0
type AnonymousAlign = AST.Token.Token "align" 0
type AnonymousAlignas = AST.Token.Token "alignas" 0
type AnonymousAlignof = AST.Token.Token "alignof" 0
type AnonymousArray = AST.Token.Token "array" 0
type AnonymousAs = AST.Token.Token "as" 9
type AnonymousAsm = AST.Token.Token "asm" 0
type AnonymousAsmFragment = AST.Token.Token "asm_fragment" 0
type AnonymousAsync = AST.Token.Token "async" 25
type AnonymousAtomic = AST.Token.Token "atomic" 0
type AnonymousAttribute = AST.Token.Token "attribute" 0
type AnonymousAuto = AST.Token.Token "auto" 0
type AnonymousAwait = AST.Token.Token "await" 92
type AnonymousBecome = AST.Token.Token "become" 0
type AnonymousBf16 = AST.Token.Token "bf16" 0
type AnonymousBgra8unorm = AST.Token.Token "bgra8unorm" 0
type AnonymousBinding = AST.Token.Token "binding" 0
type AnonymousBindingArray = AST.Token.Token "binding_array" 0
type AnonymousBitcast = AST.Token.Token "bitcast" 0
type AnonymousBool = AST.Token.Token "bool" 0
type AnonymousBreak = AST.Token.Token "break" 19
type AnonymousBuiltin = AST.Token.Token "builtin" 0
type AnonymousCase = AST.Token.Token "case" 0
type AnonymousCast = AST.Token.Token "cast" 0
type AnonymousCatch = AST.Token.Token "catch" 0
type AnonymousCenter = AST.Token.Token "center" 0
type AnonymousCentroid = AST.Token.Token "centroid" 0
type AnonymousClass = AST.Token.Token "class" 40
type AnonymousCoAwait = AST.Token.Token "co_await" 0
type AnonymousCoReturn = AST.Token.Token "co_return" 0
type AnonymousCoYield = AST.Token.Token "co_yield" 0
type AnonymousCoherent = AST.Token.Token "coherent" 0
type AnonymousColumnMajor = AST.Token.Token "column_major" 0
type AnonymousCommon = AST.Token.Token "common" 0
type AnonymousCompile = AST.Token.Token "compile" 0
type AnonymousCompileFragment = AST.Token.Token "compile_fragment"
                                                0
type AnonymousCompute = AST.Token.Token "compute" 0
type AnonymousConcept = AST.Token.Token "concept" 0
type AnonymousConst = AST.Token.Token "const" 0
type AnonymousConstAssert = AST.Token.Token "const_assert" 0
type AnonymousConstCast = AST.Token.Token "const_cast" 0
type AnonymousConsteval = AST.Token.Token "consteval" 0
type AnonymousConstexpr = AST.Token.Token "constexpr" 0
type AnonymousConstinit = AST.Token.Token "constinit" 0
data ContinueStatement a
    = ContinueStatement {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_919 .
                       AST.Traversable1.Class.Traversable1 a_919)
instance AST.Unmarshal.SymbolMatching ContinueStatement
    where matchedSymbols _ = [122]
          showFailure _ node_920 = "expected " GHC.Base.<> ("continue_statement" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_920 GHC.Classes.== 65535
                                                                                                                        then "ERROR"
                                                                                                                        else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_920) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_921 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_922 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_923 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_924 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_921
                                                        c1_922 = TreeSitter.Node.nodeStartPoint node_920
                                TreeSitter.Node.TSPoint r2_923
                                                        c2_924 = TreeSitter.Node.nodeEndPoint node_920
deriving instance GHC.Classes.Eq a_925 => GHC.Classes.Eq (ContinueStatement a_925)
deriving instance GHC.Classes.Ord a_926 => GHC.Classes.Ord (ContinueStatement a_926)
deriving instance GHC.Show.Show a_927 => GHC.Show.Show (ContinueStatement a_927)
instance AST.Unmarshal.Unmarshal ContinueStatement
instance Data.Foldable.Foldable ContinueStatement
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor ContinueStatement
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable ContinueStatement
    where traverse = AST.Traversable1.Class.traverseDefault1
type AnonymousContinuing = AST.Token.Token "continuing" 0
type AnonymousCrate = AST.Token.Token "crate" 0
type AnonymousDebugger = AST.Token.Token "debugger" 0
type AnonymousDecltype = AST.Token.Token "decltype" 0
type AnonymousDefault = AST.Token.Token "default" 0
type AnonymousDelete = AST.Token.Token "delete" 0
type AnonymousDemote = AST.Token.Token "demote" 0
type AnonymousDemoteToHelper = AST.Token.Token "demote_to_helper" 0
type AnonymousDiscard = AST.Token.Token "discard" 0
type AnonymousDo = AST.Token.Token "do" 0
type AnonymousDynamicCast = AST.Token.Token "dynamic_cast" 0
type AnonymousElse = AST.Token.Token "else" 24
type AnonymousEnable = AST.Token.Token "enable" 0
type AnonymousEnum = AST.Token.Token "enum" 0
type AnonymousExplicit = AST.Token.Token "explicit" 0
type AnonymousExport = AST.Token.Token "export" 0
type AnonymousExtends = AST.Token.Token "extends" 0
type AnonymousExtern = AST.Token.Token "extern" 0
type AnonymousExternal = AST.Token.Token "external" 0
type AnonymousF16 = AST.Token.Token "f16" 0
type AnonymousF32 = AST.Token.Token "f32" 0
type AnonymousF64 = AST.Token.Token "f64" 0
type AnonymousFallthrough = AST.Token.Token "fallthrough" 0
type AnonymousFalse = AST.Token.Token "false" 0
type AnonymousFilter = AST.Token.Token "filter" 0
type AnonymousFinal = AST.Token.Token "final" 0
type AnonymousFinally = AST.Token.Token "finally" 31
type AnonymousFlat = AST.Token.Token "flat" 0
type AnonymousFn = AST.Token.Token "fn" 0
type AnonymousFor = AST.Token.Token "for" 26
type AnonymousFragDepth = AST.Token.Token "frag_depth" 0
type AnonymousFragment = AST.Token.Token "fragment" 0
type AnonymousFriend = AST.Token.Token "friend" 0
type AnonymousFrom = AST.Token.Token "from" 4
type AnonymousFrontFacing = AST.Token.Token "front_facing" 0
type AnonymousFunction = AST.Token.Token "function" 0
type AnonymousFxgroup = AST.Token.Token "fxgroup" 0
type AnonymousGet = AST.Token.Token "get" 0
type AnonymousGlobalInvocationId = AST.Token.Token "global_invocation_id"
                                                   0
type AnonymousGoto = AST.Token.Token "goto" 0
type AnonymousGroup = AST.Token.Token "group" 0
type AnonymousGroupshared = AST.Token.Token "groupshared" 0
type AnonymousHandle = AST.Token.Token "handle" 0
data HexIntLiteral a
    = HexIntLiteral {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_928 .
                       AST.Traversable1.Class.Traversable1 a_928)
instance AST.Unmarshal.SymbolMatching HexIntLiteral
    where matchedSymbols _ = []
          showFailure _ node_929 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_929 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_929) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_930 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_931 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_932 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_933 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_930
                                                        c1_931 = TreeSitter.Node.nodeStartPoint node_929
                                TreeSitter.Node.TSPoint r2_932
                                                        c2_933 = TreeSitter.Node.nodeEndPoint node_929
deriving instance GHC.Classes.Eq a_934 => GHC.Classes.Eq (HexIntLiteral a_934)
deriving instance GHC.Classes.Ord a_935 => GHC.Classes.Ord (HexIntLiteral a_935)
deriving instance GHC.Show.Show a_936 => GHC.Show.Show (HexIntLiteral a_936)
instance AST.Unmarshal.Unmarshal HexIntLiteral
instance Data.Foldable.Foldable HexIntLiteral
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor HexIntLiteral
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable HexIntLiteral
    where traverse = AST.Traversable1.Class.traverseDefault1
type AnonymousHighp = AST.Token.Token "highp" 0
type AnonymousI16 = AST.Token.Token "i16" 0
type AnonymousI32 = AST.Token.Token "i32" 0
type AnonymousI64 = AST.Token.Token "i64" 0
type AnonymousI8 = AST.Token.Token "i8" 0
type AnonymousId = AST.Token.Token "id" 0
data IdentPatternToken a
    = IdentPatternToken {ann :: a, text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_937 .
                       AST.Traversable1.Class.Traversable1 a_937)
instance AST.Unmarshal.SymbolMatching IdentPatternToken
    where matchedSymbols _ = []
          showFailure _ node_938 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_938 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_938) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_939 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_940 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_941 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_942 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_939
                                                        c1_940 = TreeSitter.Node.nodeStartPoint node_938
                                TreeSitter.Node.TSPoint r2_941
                                                        c2_942 = TreeSitter.Node.nodeEndPoint node_938
deriving instance GHC.Classes.Eq a_943 => GHC.Classes.Eq (IdentPatternToken a_943)
deriving instance GHC.Classes.Ord a_944 => GHC.Classes.Ord (IdentPatternToken a_944)
deriving instance GHC.Show.Show a_945 => GHC.Show.Show (IdentPatternToken a_945)
instance AST.Unmarshal.Unmarshal IdentPatternToken
instance Data.Foldable.Foldable IdentPatternToken
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor IdentPatternToken
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable IdentPatternToken
    where traverse = AST.Traversable1.Class.traverseDefault1
type AnonymousIf = AST.Token.Token "if" 21
type AnonymousImpl = AST.Token.Token "impl" 0
type AnonymousImplements = AST.Token.Token "implements" 0
type AnonymousImport = AST.Token.Token "import" 2
type AnonymousInline = AST.Token.Token "inline" 0
type AnonymousInout = AST.Token.Token "inout" 0
type AnonymousInstanceIndex = AST.Token.Token "instance_index" 0
type AnonymousInstanceof = AST.Token.Token "instanceof" 0
type AnonymousInterface = AST.Token.Token "interface" 0
type AnonymousInterpolate = AST.Token.Token "interpolate" 0
type AnonymousInvariant = AST.Token.Token "invariant" 0
type AnonymousLayout = AST.Token.Token "layout" 0
type AnonymousLet = AST.Token.Token "let" 0
type AnonymousLinear = AST.Token.Token "linear" 0
type AnonymousLocalInvocationId = AST.Token.Token "local_invocation_id"
                                                  0
type AnonymousLocalInvocationIndex = AST.Token.Token "local_invocation_index"
                                                     0
type AnonymousLocation = AST.Token.Token "location" 0
type AnonymousLoop = AST.Token.Token "loop" 0
type AnonymousLowp = AST.Token.Token "lowp" 0
type AnonymousMacro = AST.Token.Token "macro" 0
type AnonymousMacroRules = AST.Token.Token "macro_rules" 0
type AnonymousMat2x2 = AST.Token.Token "mat2x2" 0
type AnonymousMat2x3 = AST.Token.Token "mat2x3" 0
type AnonymousMat2x4 = AST.Token.Token "mat2x4" 0
type AnonymousMat3x2 = AST.Token.Token "mat3x2" 0
type AnonymousMat3x3 = AST.Token.Token "mat3x3" 0
type AnonymousMat3x4 = AST.Token.Token "mat3x4" 0
type AnonymousMat4x2 = AST.Token.Token "mat4x2" 0
type AnonymousMat4x3 = AST.Token.Token "mat4x3" 0
type AnonymousMat4x4 = AST.Token.Token "mat4x4" 0
type AnonymousMatch = AST.Token.Token "match" 0
type AnonymousMediump = AST.Token.Token "mediump" 0
type AnonymousMeta = AST.Token.Token "meta" 0
type AnonymousMod = AST.Token.Token "mod" 0
type AnonymousModule = AST.Token.Token "module" 0
type AnonymousMove = AST.Token.Token "move" 0
data MultisampledTextureType a
    = MultisampledTextureType {ann :: a,
                               text :: Data.Text.Internal.Text}
    deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
    deriving anyclass (forall a_946 .
                       AST.Traversable1.Class.Traversable1 a_946)
instance AST.Unmarshal.SymbolMatching MultisampledTextureType
    where matchedSymbols _ = []
          showFailure _ node_947 = "expected " GHC.Base.<> ("" GHC.Base.<> (" but got " GHC.Base.<> (if TreeSitter.Node.nodeSymbol node_947 GHC.Classes.== 65535
                                                                                                      then "ERROR"
                                                                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_947) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_948 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_949 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_950 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_951 GHC.Base.<> "]"))))))))))))
                          where TreeSitter.Node.TSPoint r1_948
                                                        c1_949 = TreeSitter.Node.nodeStartPoint node_947
                                TreeSitter.Node.TSPoint r2_950
                                                        c2_951 = TreeSitter.Node.nodeEndPoint node_947
deriving instance GHC.Classes.Eq a_952 => GHC.Classes.Eq (MultisampledTextureType a_952)
deriving instance GHC.Classes.Ord a_953 => GHC.Classes.Ord (MultisampledTextureType a_953)
deriving instance GHC.Show.Show a_954 => GHC.Show.Show (MultisampledTextureType a_954)
instance AST.Unmarshal.Unmarshal MultisampledTextureType
instance Data.Foldable.Foldable MultisampledTextureType
    where foldMap = AST.Traversable1.Class.foldMapDefault1
instance GHC.Base.Functor MultisampledTextureType
    where fmap = AST.Traversable1.Class.fmapDefault1
instance Data.Traversable.Traversable MultisampledTextureType
    where traverse = AST.Traversable1.Class.traverseDefault1
type AnonymousMut = AST.Token.Token "mut" 0
type AnonymousMutable = AST.Token.Token "mutable" 0
type AnonymousNamespace = AST.Token.Token "namespace" 0
type AnonymousNew = AST.Token.Token "new" 0
type AnonymousNil = AST.Token.Token "nil" 0
type AnonymousNoexcept = AST.Token.Token "noexcept" 0
type AnonymousNoinline = AST.Token.Token "noinline" 0
type AnonymousNointerpolation = AST.Token.Token "nointerpolation" 0
type AnonymousNoperspective = AST.Token.Token "noperspective" 0
type AnonymousNull = AST.Token.Token "null" 0
type AnonymousNullptr = AST.Token.Token "nullptr" 0
type AnonymousNumWorkgroups = AST.Token.Token "num_workgroups" 0
type AnonymousOf = AST.Token.Token "of" 0
type AnonymousOperator = AST.Token.Token "operator" 0
type AnonymousOverride = AST.Token.Token "override" 0
type AnonymousPackage = AST.Token.Token "package" 0
type AnonymousPackoffset = AST.Token.Token "packoffset" 0
type AnonymousPartition = AST.Token.Token "partition" 0
type AnonymousPass = AST.Token.Token "pass" 18
type AnonymousPatch = AST.Token.Token "patch" 0
type AnonymousPerspective = AST.Token.Token "perspective" 0
type AnonymousPixelfragment = AST.Token.Token "pixelfragment" 0
type AnonymousPosition = AST.Token.Token "position" 0
type AnonymousPrecise = AST.Token.Token "precise" 0
type AnonymousPrecision = AST.Token.Token "precision" 0
type AnonymousPremerge = AST.Token.Token "premerge" 0
type AnonymousPriv = AST.Token.Token "priv" 0
type AnonymousPrivate = AST.Token.Token "private" 0
type AnonymousProtected = AST.Token.Token "protected" 0
type AnonymousPtr = AST.Token.Token "ptr" 0
type AnonymousPub = AST.Token.Token "pub" 0
type AnonymousPublic = AST.Token.Token "public" 0
type AnonymousQuat = AST.Token.Token "quat" 0
type AnonymousR32float = AST.Token.Token "r32float" 0
type AnonymousR32sint = AST.Token.Token "r32sint" 0
type AnonymousR32uint = AST.Token.Token "r32uint" 0
type AnonymousRead = AST.Token.Token "read" 0
type AnonymousReadWrite = AST.Token.Token "read_write" 0
type AnonymousReadonly = AST.Token.Token "readonly" 0
type AnonymousRef = AST.Token.Token "ref" 0
type AnonymousRegardless = AST.Token.Token "regardless" 0
type AnonymousRegister = AST.Token.Token "register" 0
type AnonymousReinterpretCast = AST.Token.Token "reinterpret_cast"
                                                0
type AnonymousRequires = AST.Token.Token "requires" 0
type AnonymousResource = AST.Token.Token "resource" 0
type AnonymousRestrict = AST.Token.Token "restrict" 0
type AnonymousReturn = AST.Token.Token "return" 15
type AnonymousRg32float = AST.Token.Token "rg32float" 0
type AnonymousRg32sint = AST.Token.Token "rg32sint" 0
type AnonymousRg32uint = AST.Token.Token "rg32uint" 0
type AnonymousRgba16float = AST.Token.Token "rgba16float" 0
type AnonymousRgba16sint = AST.Token.Token "rgba16sint" 0
type AnonymousRgba16uint = AST.Token.Token "rgba16uint" 0
type AnonymousRgba32float = AST.Token.Token "rgba32float" 0
type AnonymousRgba32sint = AST.Token.Token "rgba32sint" 0
type AnonymousRgba32uint = AST.Token.Token "rgba32uint" 0
type AnonymousRgba8sint = AST.Token.Token "rgba8sint" 0
type AnonymousRgba8snorm = AST.Token.Token "rgba8snorm" 0
type AnonymousRgba8uint = AST.Token.Token "rgba8uint" 0
type AnonymousRgba8unorm = AST.Token.Token "rgba8unorm" 0
type AnonymousSample = AST.Token.Token "sample" 0
type AnonymousSampleIndex = AST.Token.Token "sample_index" 0
type AnonymousSampleMask = AST.Token.Token "sample_mask" 0
type AnonymousSampler = AST.Token.Token "sampler" 0
type AnonymousSamplerComparison = AST.Token.Token "sampler_comparison"
                                                  0
type AnonymousSelf = AST.Token.Token "self" 0
type AnonymousSet = AST.Token.Token "set" 0
type AnonymousShared = AST.Token.Token "shared" 0
type AnonymousSigned = AST.Token.Token "signed" 0
type AnonymousSize = AST.Token.Token "size" 0
type AnonymousSizeof = AST.Token.Token "sizeof" 0
type AnonymousSmooth = AST.Token.Token "smooth" 0
type AnonymousSnorm = AST.Token.Token "snorm" 0
type AnonymousStatic = AST.Token.Token "static" 0
type AnonymousStaticAssert = AST.Token.Token "static_assert" 0
type AnonymousStaticCast = AST.Token.Token "static_cast" 0
type AnonymousStd = AST.Token.Token "std" 0
type AnonymousStorage = AST.Token.Token "storage" 0
type AnonymousStruct = AST.Token.Token "struct" 0
type AnonymousSubroutine = AST.Token.Token "subroutine" 0
type AnonymousSuper = AST.Token.Token "super" 0
type AnonymousSwitch = AST.Token.Token "switch" 0
type AnonymousTarget = AST.Token.Token "target" 0
type AnonymousTemplate = AST.Token.Token "template" 0
type AnonymousTexture1d = AST.Token.Token "texture_1d" 0
type AnonymousTexture2d = AST.Token.Token "texture_2d" 0
type AnonymousTexture2dArray = AST.Token.Token "texture_2d_array" 0
type AnonymousTexture3d = AST.Token.Token "texture_3d" 0
type AnonymousTextureCube = AST.Token.Token "texture_cube" 0
type AnonymousTextureCubeArray = AST.Token.Token "texture_cube_array"
                                                 0
type AnonymousTextureDepth2d = AST.Token.Token "texture_depth_2d" 0
type AnonymousTextureDepth2dArray = AST.Token.Token "texture_depth_2d_array"
                                                    0
type AnonymousTextureDepthCube = AST.Token.Token "texture_depth_cube"
                                                 0
type AnonymousTextureDepthCubeArray = AST.Token.Token "texture_depth_cube_array"
                                                      0
type AnonymousTextureDepthMultisampled2d = AST.Token.Token "texture_depth_multisampled_2d"
                                                           0
type AnonymousTextureStorage1d = AST.Token.Token "texture_storage_1d"
                                                 0
type AnonymousTextureStorage2d = AST.Token.Token "texture_storage_2d"
                                                 0
type AnonymousTextureStorage2dArray = AST.Token.Token "texture_storage_2d_array"
                                                      0
type AnonymousTextureStorage3d = AST.Token.Token "texture_storage_3d"
                                                 0
type AnonymousThis = AST.Token.Token "this" 0
type AnonymousThreadLocal = AST.Token.Token "thread_local" 0
type AnonymousThrow = AST.Token.Token "throw" 0
type AnonymousTrait = AST.Token.Token "trait" 0
type AnonymousTrue = AST.Token.Token "true" 0
type AnonymousTry = AST.Token.Token "try" 29
type AnonymousType = AST.Token.Token "type" 0
type AnonymousTypedef = AST.Token.Token "typedef" 0
type AnonymousTypeid = AST.Token.Token "typeid" 0
type AnonymousTypename = AST.Token.Token "typename" 0
type AnonymousTypeof = AST.Token.Token "typeof" 0
type AnonymousU16 = AST.Token.Token "u16" 0
type AnonymousU32 = AST.Token.Token "u32" 0
type AnonymousU64 = AST.Token.Token "u64" 0
type AnonymousU8 = AST.Token.Token "u8" 0
type AnonymousUniform = AST.Token.Token "uniform" 0
type AnonymousUnion = AST.Token.Token "union" 0
type AnonymousUnless = AST.Token.Token "unless" 0
type AnonymousUnorm = AST.Token.Token "unorm" 0
type AnonymousUnsafe = AST.Token.Token "unsafe" 0
type AnonymousUnsized = AST.Token.Token "unsized" 0
type AnonymousUse = AST.Token.Token "use" 0
type AnonymousUsing = AST.Token.Token "using" 0
type AnonymousVar = AST.Token.Token "var" 0
type AnonymousVarying = AST.Token.Token "varying" 0
type AnonymousVec2 = AST.Token.Token "vec2" 0
type AnonymousVec3 = AST.Token.Token "vec3" 0
type AnonymousVec4 = AST.Token.Token "vec4" 0
type AnonymousVertex = AST.Token.Token "vertex" 0
type AnonymousVertexIndex = AST.Token.Token "vertex_index" 0
type AnonymousVirtual = AST.Token.Token "virtual" 0
type AnonymousVolatile = AST.Token.Token "volatile" 0
type AnonymousWgsl = AST.Token.Token "wgsl" 0
type AnonymousWhere = AST.Token.Token "where" 0
type AnonymousWhile = AST.Token.Token "while" 28
type AnonymousWith = AST.Token.Token "with" 32
type AnonymousWorkgroup = AST.Token.Token "workgroup" 0
type AnonymousWorkgroupId = AST.Token.Token "workgroup_id" 0
type AnonymousWorkgroupSize = AST.Token.Token "workgroup_size" 0
type AnonymousWrite = AST.Token.Token "write" 0
type AnonymousWriteonly = AST.Token.Token "writeonly" 0
type AnonymousYield = AST.Token.Token "yield" 77
type AnonymousLBrace = AST.Token.Token "{" 81
type AnonymousPipe = AST.Token.Token "|" 50
type AnonymousPipeEqual = AST.Token.Token "|=" 76
type AnonymousPipePipe = AST.Token.Token "||" 0
type AnonymousRBrace = AST.Token.Token "}" 82
type AnonymousTilde = AST.Token.Token "~" 54
